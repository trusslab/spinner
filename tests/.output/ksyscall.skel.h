/* SPDX-License-Identifier: (LGPL-2.1 OR BSD-2-Clause) */

/* THIS FILE IS AUTOGENERATED BY BPFTOOL! */
#ifndef __KSYSCALL_BPF_SKEL_H__
#define __KSYSCALL_BPF_SKEL_H__

#include <errno.h>
#include <stdlib.h>
#include <bpf/libbpf.h>

struct ksyscall_bpf {
	struct bpf_object_skeleton *skeleton;
	struct bpf_object *obj;
	struct {
		struct bpf_map *rodata;
		struct bpf_map *kconfig;
	} maps;
	struct {
		struct bpf_program *tgkill_entry;
		struct bpf_program *entry_probe;
	} progs;
	struct {
		struct bpf_link *tgkill_entry;
		struct bpf_link *entry_probe;
	} links;
	struct ksyscall_bpf__kconfig {
		_Bool LINUX_HAS_SYSCALL_WRAPPER;
	} *kconfig;

#ifdef __cplusplus
	static inline struct ksyscall_bpf *open(const struct bpf_object_open_opts *opts = nullptr);
	static inline struct ksyscall_bpf *open_and_load();
	static inline int load(struct ksyscall_bpf *skel);
	static inline int attach(struct ksyscall_bpf *skel);
	static inline void detach(struct ksyscall_bpf *skel);
	static inline void destroy(struct ksyscall_bpf *skel);
	static inline const void *elf_bytes(size_t *sz);
#endif /* __cplusplus */
};

static void
ksyscall_bpf__destroy(struct ksyscall_bpf *obj)
{
	if (!obj)
		return;
	if (obj->skeleton)
		bpf_object__destroy_skeleton(obj->skeleton);
	free(obj);
}

static inline int
ksyscall_bpf__create_skeleton(struct ksyscall_bpf *obj);

static inline struct ksyscall_bpf *
ksyscall_bpf__open_opts(const struct bpf_object_open_opts *opts)
{
	struct ksyscall_bpf *obj;
	int err;

	obj = (struct ksyscall_bpf *)calloc(1, sizeof(*obj));
	if (!obj) {
		errno = ENOMEM;
		return NULL;
	}

	err = ksyscall_bpf__create_skeleton(obj);
	if (err)
		goto err_out;

	err = bpf_object__open_skeleton(obj->skeleton, opts);
	if (err)
		goto err_out;

	return obj;
err_out:
	ksyscall_bpf__destroy(obj);
	errno = -err;
	return NULL;
}

static inline struct ksyscall_bpf *
ksyscall_bpf__open(void)
{
	return ksyscall_bpf__open_opts(NULL);
}

static inline int
ksyscall_bpf__load(struct ksyscall_bpf *obj)
{
	return bpf_object__load_skeleton(obj->skeleton);
}

static inline struct ksyscall_bpf *
ksyscall_bpf__open_and_load(void)
{
	struct ksyscall_bpf *obj;
	int err;

	obj = ksyscall_bpf__open();
	if (!obj)
		return NULL;
	err = ksyscall_bpf__load(obj);
	if (err) {
		ksyscall_bpf__destroy(obj);
		errno = -err;
		return NULL;
	}
	return obj;
}

static inline int
ksyscall_bpf__attach(struct ksyscall_bpf *obj)
{
	return bpf_object__attach_skeleton(obj->skeleton);
}

static inline void
ksyscall_bpf__detach(struct ksyscall_bpf *obj)
{
	bpf_object__detach_skeleton(obj->skeleton);
}

static inline const void *ksyscall_bpf__elf_bytes(size_t *sz);

static inline int
ksyscall_bpf__create_skeleton(struct ksyscall_bpf *obj)
{
	struct bpf_object_skeleton *s;
	int err;

	s = (struct bpf_object_skeleton *)calloc(1, sizeof(*s));
	if (!s)	{
		err = -ENOMEM;
		goto err;
	}

	s->sz = sizeof(*s);
	s->name = "ksyscall_bpf";
	s->obj = &obj->obj;

	/* maps */
	s->map_cnt = 2;
	s->map_skel_sz = sizeof(*s->maps);
	s->maps = (struct bpf_map_skeleton *)calloc(s->map_cnt, s->map_skel_sz);
	if (!s->maps) {
		err = -ENOMEM;
		goto err;
	}

	s->maps[0].name = "ksyscall.rodata";
	s->maps[0].map = &obj->maps.rodata;

	s->maps[1].name = "ksyscal.kconfig";
	s->maps[1].map = &obj->maps.kconfig;
	s->maps[1].mmaped = (void **)&obj->kconfig;

	/* programs */
	s->prog_cnt = 2;
	s->prog_skel_sz = sizeof(*s->progs);
	s->progs = (struct bpf_prog_skeleton *)calloc(s->prog_cnt, s->prog_skel_sz);
	if (!s->progs) {
		err = -ENOMEM;
		goto err;
	}

	s->progs[0].name = "tgkill_entry";
	s->progs[0].prog = &obj->progs.tgkill_entry;
	s->progs[0].link = &obj->links.tgkill_entry;

	s->progs[1].name = "entry_probe";
	s->progs[1].prog = &obj->progs.entry_probe;
	s->progs[1].link = &obj->links.entry_probe;

	s->data = ksyscall_bpf__elf_bytes(&s->data_sz);

	obj->skeleton = s;
	return 0;
err:
	bpf_object__destroy_skeleton(s);
	return err;
}

static inline const void *ksyscall_bpf__elf_bytes(size_t *sz)
{
	static const char data[] __attribute__((__aligned__(8))) = "\
\x7f\x45\x4c\x46\x02\x01\x01\0\0\0\0\0\0\0\0\0\x01\0\xf7\0\x01\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\xd0\x10\0\0\0\0\0\0\0\0\0\0\x40\0\0\0\0\0\x40\0\x0b\0\
\x01\0\0\x2e\x73\x74\x72\x74\x61\x62\0\x2e\x73\x79\x6d\x74\x61\x62\0\x6b\x73\
\x79\x73\x63\x61\x6c\x6c\x2f\x74\x67\x6b\x69\x6c\x6c\0\x6b\x73\x79\x73\x63\x61\
\x6c\x6c\x2f\x6b\x69\x6c\x6c\0\x6c\x69\x63\x65\x6e\x73\x65\0\x2e\x72\x6f\x64\
\x61\x74\x61\0\x6b\x73\x79\x73\x63\x61\x6c\x6c\x2e\x62\x70\x66\x2e\x63\0\x4c\
\x42\x42\x30\x5f\x33\0\x4c\x42\x42\x30\x5f\x36\0\x4c\x42\x42\x30\x5f\x35\0\x5f\
\x5f\x5f\x5f\x74\x67\x6b\x69\x6c\x6c\x5f\x65\x6e\x74\x72\x79\x2e\x5f\x5f\x5f\
\x66\x6d\x74\0\x4c\x42\x42\x31\x5f\x33\0\x4c\x42\x42\x31\x5f\x35\0\x4c\x42\x42\
\x31\x5f\x34\0\x5f\x5f\x5f\x5f\x65\x6e\x74\x72\x79\x5f\x70\x72\x6f\x62\x65\x2e\
\x5f\x5f\x5f\x66\x6d\x74\0\x74\x67\x6b\x69\x6c\x6c\x5f\x65\x6e\x74\x72\x79\0\
\x4c\x49\x4e\x55\x58\x5f\x48\x41\x53\x5f\x53\x59\x53\x43\x41\x4c\x4c\x5f\x57\
\x52\x41\x50\x50\x45\x52\0\x65\x6e\x74\x72\x79\x5f\x70\x72\x6f\x62\x65\0\x5f\
\x6c\x69\x63\x65\x6e\x73\x65\0\x2e\x72\x65\x6c\x6b\x73\x79\x73\x63\x61\x6c\x6c\
\x2f\x74\x67\x6b\x69\x6c\x6c\0\x2e\x72\x65\x6c\x6b\x73\x79\x73\x63\x61\x6c\x6c\
\x2f\x6b\x69\x6c\x6c\0\x2e\x42\x54\x46\0\x2e\x42\x54\x46\x2e\x65\x78\x74\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x3f\0\0\0\x04\0\xf1\xff\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x03\0\x03\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\x4e\0\0\0\0\0\x03\0\x88\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x55\0\0\0\0\0\x03\0\
\x90\x02\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x5c\0\0\0\0\0\x03\0\x38\x02\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\x63\0\0\0\x01\0\x06\0\0\0\0\0\0\0\0\0\x51\0\0\0\0\0\0\0\0\0\0\0\
\x03\0\x04\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x7b\0\0\0\0\0\x04\0\xe0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\x82\0\0\0\0\0\x04\0\xc0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\x89\0\0\0\0\0\x04\0\x20\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x90\0\0\0\x01\0\x06\0\
\x51\0\0\0\0\0\0\0\x3e\0\0\0\0\0\0\0\0\0\0\0\x03\0\x06\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\xa7\0\0\0\x12\0\x03\0\0\0\0\0\0\0\0\0\xa0\x02\0\0\0\0\0\0\xb4\0\0\0\
\x10\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xce\0\0\0\x12\0\x04\0\0\0\0\0\0\0\0\
\0\xd0\x01\0\0\0\0\0\0\xda\0\0\0\x11\0\x05\0\0\0\0\0\0\0\0\0\x04\0\0\0\0\0\0\0\
\x18\x02\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x71\x22\0\0\0\0\0\0\x15\x02\x2d\0\0\0\0\0\
\xb7\x02\0\0\x70\0\0\0\x79\x16\x70\0\0\0\0\0\xbf\x63\0\0\0\0\0\0\x0f\x23\0\0\0\
\0\0\0\xbf\xa1\0\0\0\0\0\0\x07\x01\0\0\xc8\xff\xff\xff\xb7\x02\0\0\x08\0\0\0\
\x85\0\0\0\x71\0\0\0\xb7\x01\0\0\x68\0\0\0\xbf\x63\0\0\0\0\0\0\x0f\x13\0\0\0\0\
\0\0\x79\xa8\xc8\xff\0\0\0\0\xbf\xa1\0\0\0\0\0\0\x07\x01\0\0\xc8\xff\xff\xff\
\xb7\x02\0\0\x08\0\0\0\x85\0\0\0\x71\0\0\0\xb7\x01\0\0\x60\0\0\0\x0f\x16\0\0\0\
\0\0\0\x79\xa9\xc8\xff\0\0\0\0\xbf\xa1\0\0\0\0\0\0\x07\x01\0\0\xc8\xff\xff\xff\
\xb7\x02\0\0\x08\0\0\0\xbf\x63\0\0\0\0\0\0\x85\0\0\0\x71\0\0\0\x79\xa7\xc8\xff\
\0\0\0\0\x85\0\0\0\x0e\0\0\0\xbf\x06\0\0\0\0\0\0\x67\x07\0\0\x20\0\0\0\xbf\x71\
\0\0\0\0\0\0\x77\x01\0\0\x20\0\0\0\x15\x01\x2f\0\0\0\0\0\xbf\xa1\0\0\0\0\0\0\
\x07\x01\0\0\xf0\xff\xff\xff\x7b\x1a\xc0\xff\0\0\0\0\xb7\x02\0\0\x10\0\0\0\x85\
\0\0\0\x10\0\0\0\xc7\x07\0\0\x20\0\0\0\x7b\x7a\xe8\xff\0\0\0\0\x67\x08\0\0\x20\
\0\0\0\xc7\x08\0\0\x20\0\0\0\x7b\x8a\xe0\xff\0\0\0\0\x67\x09\0\0\x20\0\0\0\xc7\
\x09\0\0\x20\0\0\0\x7b\x9a\xd8\xff\0\0\0\0\x05\0\x16\0\0\0\0\0\x79\x19\x70\0\0\
\0\0\0\x79\x18\x68\0\0\0\0\0\x79\x17\x60\0\0\0\0\0\x85\0\0\0\x0e\0\0\0\xbf\x06\
\0\0\0\0\0\0\x67\x07\0\0\x20\0\0\0\xbf\x71\0\0\0\0\0\0\x77\x01\0\0\x20\0\0\0\
\x15\x01\x18\0\0\0\0\0\xbf\xa1\0\0\0\0\0\0\x07\x01\0\0\xf0\xff\xff\xff\x7b\x1a\
\xc0\xff\0\0\0\0\xb7\x02\0\0\x10\0\0\0\x85\0\0\0\x10\0\0\0\xc7\x07\0\0\x20\0\0\
\0\x7b\x7a\xe8\xff\0\0\0\0\x67\x09\0\0\x20\0\0\0\xc7\x09\0\0\x20\0\0\0\x7b\x9a\
\xe0\xff\0\0\0\0\x67\x08\0\0\x20\0\0\0\xc7\x08\0\0\x20\0\0\0\x7b\x8a\xd8\xff\0\
\0\0\0\x79\xa1\xc0\xff\0\0\0\0\x7b\x1a\xd0\xff\0\0\0\0\x77\x06\0\0\x20\0\0\0\
\x7b\x6a\xc8\xff\0\0\0\0\xbf\xa3\0\0\0\0\0\0\x07\x03\0\0\xc8\xff\xff\xff\x18\
\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xb7\x02\0\0\x51\0\0\0\xb7\x04\0\0\x28\0\0\0\
\x85\0\0\0\xb1\0\0\0\xb7\0\0\0\0\0\0\0\x95\0\0\0\0\0\0\0\x18\x02\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\x71\x22\0\0\0\0\0\0\x15\x02\x18\0\0\0\0\0\xb7\x02\0\0\x70\0\0\0\
\x79\x16\x70\0\0\0\0\0\xbf\x63\0\0\0\0\0\0\x0f\x23\0\0\0\0\0\0\xbf\xa1\0\0\0\0\
\0\0\x07\x01\0\0\xd0\xff\xff\xff\xb7\x02\0\0\x08\0\0\0\x85\0\0\0\x71\0\0\0\xb7\
\x01\0\0\x68\0\0\0\x0f\x16\0\0\0\0\0\0\x79\xa8\xd0\xff\0\0\0\0\xbf\xa1\0\0\0\0\
\0\0\x07\x01\0\0\xd0\xff\xff\xff\xb7\x02\0\0\x08\0\0\0\xbf\x63\0\0\0\0\0\0\x85\
\0\0\0\x71\0\0\0\x79\xa9\xd0\xff\0\0\0\0\x85\0\0\0\x0e\0\0\0\xbf\x06\0\0\0\0\0\
\0\x67\x09\0\0\x20\0\0\0\xbf\x91\0\0\0\0\0\0\x77\x01\0\0\x20\0\0\0\x15\x01\x1d\
\0\0\0\0\0\x05\0\x08\0\0\0\0\0\x79\x18\x70\0\0\0\0\0\x79\x19\x68\0\0\0\0\0\x85\
\0\0\0\x0e\0\0\0\xbf\x06\0\0\0\0\0\0\x67\x09\0\0\x20\0\0\0\xbf\x91\0\0\0\0\0\0\
\x77\x01\0\0\x20\0\0\0\x15\x01\x14\0\0\0\0\0\xbf\xa7\0\0\0\0\0\0\x07\x07\0\0\
\xf0\xff\xff\xff\xbf\x71\0\0\0\0\0\0\xb7\x02\0\0\x10\0\0\0\x85\0\0\0\x10\0\0\0\
\xc7\x09\0\0\x20\0\0\0\x7b\x9a\xe8\xff\0\0\0\0\x67\x08\0\0\x20\0\0\0\xc7\x08\0\
\0\x20\0\0\0\x7b\x8a\xe0\xff\0\0\0\0\x7b\x7a\xd8\xff\0\0\0\0\x77\x06\0\0\x20\0\
\0\0\x7b\x6a\xd0\xff\0\0\0\0\xbf\xa3\0\0\0\0\0\0\x07\x03\0\0\xd0\xff\xff\xff\
\x18\x01\0\0\x51\0\0\0\0\0\0\0\0\0\0\0\xb7\x02\0\0\x3e\0\0\0\xb7\x04\0\0\x20\0\
\0\0\x85\0\0\0\xb1\0\0\0\xb7\0\0\0\0\0\0\0\x95\0\0\0\0\0\0\0\x47\x50\x4c\0\x74\
\x67\x6b\x69\x6c\x6c\x20\x73\x79\x73\x63\x61\x6c\x6c\x20\x63\x61\x6c\x6c\x65\
\x64\x20\x62\x79\x20\x50\x49\x44\x20\x25\x64\x20\x28\x25\x73\x29\x20\x66\x6f\
\x72\x20\x74\x68\x72\x65\x61\x64\x20\x69\x64\x20\x25\x64\x20\x77\x69\x74\x68\
\x20\x70\x69\x64\x20\x25\x64\x20\x61\x6e\x64\x20\x73\x69\x67\x6e\x61\x6c\x20\
\x25\x64\x2e\0\x4b\x49\x4c\x4c\x20\x73\x79\x73\x63\x61\x6c\x6c\x20\x63\x61\x6c\
\x6c\x65\x64\x20\x62\x79\x20\x50\x49\x44\x20\x25\x64\x20\x28\x25\x73\x29\x20\
\x66\x6f\x72\x20\x50\x49\x44\x20\x25\x64\x20\x77\x69\x74\x68\x20\x73\x69\x67\
\x6e\x61\x6c\x20\x25\x64\x2e\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\x0e\0\0\0\
\x68\x02\0\0\0\0\0\0\x01\0\0\0\x0c\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\x0e\0\0\0\
\x98\x01\0\0\0\0\0\0\x01\0\0\0\x0c\0\0\0\x9f\xeb\x01\0\x18\0\0\0\0\0\0\0\x78\
\x02\0\0\x78\x02\0\0\x64\x02\0\0\0\0\0\0\0\0\0\x02\x02\0\0\0\x01\0\0\0\x15\0\0\
\x04\xa8\0\0\0\x09\0\0\0\x03\0\0\0\0\0\0\0\x0d\0\0\0\x03\0\0\0\x40\0\0\0\x11\0\
\0\0\x03\0\0\0\x80\0\0\0\x15\0\0\0\x03\0\0\0\xc0\0\0\0\x19\0\0\0\x03\0\0\0\0\
\x01\0\0\x1c\0\0\0\x03\0\0\0\x40\x01\0\0\x1f\0\0\0\x03\0\0\0\x80\x01\0\0\x23\0\
\0\0\x03\0\0\0\xc0\x01\0\0\x27\0\0\0\x03\0\0\0\0\x02\0\0\x2a\0\0\0\x03\0\0\0\
\x40\x02\0\0\x2d\0\0\0\x03\0\0\0\x80\x02\0\0\x30\0\0\0\x03\0\0\0\xc0\x02\0\0\
\x33\0\0\0\x03\0\0\0\0\x03\0\0\x36\0\0\0\x03\0\0\0\x40\x03\0\0\x39\0\0\0\x03\0\
\0\0\x80\x03\0\0\x3c\0\0\0\x03\0\0\0\xc0\x03\0\0\x44\0\0\0\x03\0\0\0\0\x04\0\0\
\x47\0\0\0\x03\0\0\0\x40\x04\0\0\x4a\0\0\0\x03\0\0\0\x80\x04\0\0\x50\0\0\0\x03\
\0\0\0\xc0\x04\0\0\x53\0\0\0\x03\0\0\0\0\x05\0\0\x56\0\0\0\0\0\0\x01\x08\0\0\0\
\x40\0\0\0\0\0\0\0\x01\0\0\x0d\x05\0\0\0\x64\0\0\0\x01\0\0\0\x68\0\0\0\0\0\0\
\x01\x04\0\0\0\x20\0\0\x01\x6c\0\0\0\x01\0\0\x0c\x04\0\0\0\x79\0\0\0\x01\0\0\
\x0c\x04\0\0\0\x85\0\0\0\0\0\0\x01\x01\0\0\0\x08\0\0\x04\x8b\0\0\0\0\0\0\x0e\
\x08\0\0\0\x02\0\0\0\xa5\0\0\0\0\0\0\x01\x01\0\0\0\x08\0\0\x01\0\0\0\0\0\0\0\
\x03\0\0\0\0\x0a\0\0\0\x0c\0\0\0\x04\0\0\0\xaa\0\0\0\0\0\0\x01\x04\0\0\0\x20\0\
\0\0\xbe\0\0\0\0\0\0\x0e\x0b\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\x0a\x0a\0\0\0\0\0\0\
\0\0\0\0\x03\0\0\0\0\x0e\0\0\0\x0c\0\0\0\x51\0\0\0\xc7\0\0\0\0\0\0\x0e\x0f\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\x03\0\0\0\0\x0e\0\0\0\x0c\0\0\0\x3e\0\0\0\xdf\0\0\0\0\
\0\0\x0e\x11\0\0\0\0\0\0\0\x2d\x02\0\0\x01\0\0\x0f\x04\0\0\0\x0d\0\0\0\0\0\0\0\
\x04\0\0\0\x35\x02\0\0\x02\0\0\x0f\x8f\0\0\0\x10\0\0\0\0\0\0\0\x51\0\0\0\x12\0\
\0\0\x51\0\0\0\x3e\0\0\0\x3d\x02\0\0\x01\0\0\x0f\0\0\0\0\x09\0\0\0\0\0\0\0\x01\
\0\0\0\0\x70\x74\x5f\x72\x65\x67\x73\0\x72\x31\x35\0\x72\x31\x34\0\x72\x31\x33\
\0\x72\x31\x32\0\x62\x70\0\x62\x78\0\x72\x31\x31\0\x72\x31\x30\0\x72\x39\0\x72\
\x38\0\x61\x78\0\x63\x78\0\x64\x78\0\x73\x69\0\x64\x69\0\x6f\x72\x69\x67\x5f\
\x61\x78\0\x69\x70\0\x63\x73\0\x66\x6c\x61\x67\x73\0\x73\x70\0\x73\x73\0\x75\
\x6e\x73\x69\x67\x6e\x65\x64\x20\x6c\x6f\x6e\x67\0\x63\x74\x78\0\x69\x6e\x74\0\
\x74\x67\x6b\x69\x6c\x6c\x5f\x65\x6e\x74\x72\x79\0\x65\x6e\x74\x72\x79\x5f\x70\
\x72\x6f\x62\x65\0\x5f\x42\x6f\x6f\x6c\0\x4c\x49\x4e\x55\x58\x5f\x48\x41\x53\
\x5f\x53\x59\x53\x43\x41\x4c\x4c\x5f\x57\x52\x41\x50\x50\x45\x52\0\x63\x68\x61\
\x72\0\x5f\x5f\x41\x52\x52\x41\x59\x5f\x53\x49\x5a\x45\x5f\x54\x59\x50\x45\x5f\
\x5f\0\x5f\x6c\x69\x63\x65\x6e\x73\x65\0\x5f\x5f\x5f\x5f\x74\x67\x6b\x69\x6c\
\x6c\x5f\x65\x6e\x74\x72\x79\x2e\x5f\x5f\x5f\x66\x6d\x74\0\x5f\x5f\x5f\x5f\x65\
\x6e\x74\x72\x79\x5f\x70\x72\x6f\x62\x65\x2e\x5f\x5f\x5f\x66\x6d\x74\0\x2f\x68\
\x6f\x6d\x65\x2f\x70\x72\x69\x79\x61\x2f\x6c\x69\x62\x62\x70\x66\x2d\x62\x6f\
\x6f\x74\x73\x74\x72\x61\x70\x2f\x65\x78\x61\x6d\x70\x6c\x65\x73\x2f\x63\x2f\
\x6b\x73\x79\x73\x63\x61\x6c\x6c\x2e\x62\x70\x66\x2e\x63\0\x69\x6e\x74\x20\x42\
\x50\x46\x5f\x4b\x53\x59\x53\x43\x41\x4c\x4c\x28\x74\x67\x6b\x69\x6c\x6c\x5f\
\x65\x6e\x74\x72\x79\x2c\x20\x70\x69\x64\x5f\x74\x20\x74\x67\x69\x64\x2c\x20\
\x70\x69\x64\x5f\x74\x20\x74\x69\x64\x2c\x20\x69\x6e\x74\x20\x73\x69\x67\x29\0\
\x09\x5f\x5f\x75\x33\x32\x20\x63\x61\x6c\x6c\x65\x72\x5f\x70\x69\x64\x20\x3d\
\x20\x62\x70\x66\x5f\x67\x65\x74\x5f\x63\x75\x72\x72\x65\x6e\x74\x5f\x70\x69\
\x64\x5f\x74\x67\x69\x64\x28\x29\x20\x3e\x3e\x20\x33\x32\x3b\0\x09\x69\x66\x20\
\x28\x73\x69\x67\x20\x3d\x3d\x20\x30\x29\x20\x7b\0\x09\x62\x70\x66\x5f\x67\x65\
\x74\x5f\x63\x75\x72\x72\x65\x6e\x74\x5f\x63\x6f\x6d\x6d\x28\x26\x63\x6f\x6d\
\x6d\x2c\x20\x73\x69\x7a\x65\x6f\x66\x28\x63\x6f\x6d\x6d\x29\x29\x3b\0\x09\x62\
\x70\x66\x5f\x70\x72\x69\x6e\x74\x6b\x28\0\x69\x6e\x74\x20\x42\x50\x46\x5f\x4b\
\x53\x59\x53\x43\x41\x4c\x4c\x28\x65\x6e\x74\x72\x79\x5f\x70\x72\x6f\x62\x65\
\x2c\x20\x70\x69\x64\x5f\x74\x20\x70\x69\x64\x2c\x20\x69\x6e\x74\x20\x73\x69\
\x67\x29\0\x30\x3a\x31\x34\0\x30\x3a\x31\x33\0\x30\x3a\x31\x32\0\x6c\x69\x63\
\x65\x6e\x73\x65\0\x2e\x72\x6f\x64\x61\x74\x61\0\x2e\x6b\x63\x6f\x6e\x66\x69\
\x67\0\x6b\x73\x79\x73\x63\x61\x6c\x6c\x2f\x74\x67\x6b\x69\x6c\x6c\0\x6b\x73\
\x79\x73\x63\x61\x6c\x6c\x2f\x6b\x69\x6c\x6c\0\0\0\0\0\x9f\xeb\x01\0\x20\0\0\0\
\0\0\0\0\x24\0\0\0\x24\0\0\0\x84\x02\0\0\xa8\x02\0\0\xd4\0\0\0\x08\0\0\0\x46\
\x02\0\0\x01\0\0\0\0\0\0\0\x06\0\0\0\x56\x02\0\0\x01\0\0\0\0\0\0\0\x07\0\0\0\
\x10\0\0\0\x46\x02\0\0\x18\0\0\0\0\0\0\0\xf6\0\0\0\x2d\x01\0\0\x05\x24\0\0\x50\
\0\0\0\xf6\0\0\0\x2d\x01\0\0\x05\x24\0\0\x78\0\0\0\xf6\0\0\0\x2d\x01\0\0\x05\
\x24\0\0\x88\0\0\0\xf6\0\0\0\x2d\x01\0\0\x05\x24\0\0\x90\0\0\0\xf6\0\0\0\x2d\
\x01\0\0\x05\x24\0\0\xb0\0\0\0\xf6\0\0\0\x2d\x01\0\0\x05\x24\0\0\xc0\0\0\0\xf6\
\0\0\0\x2d\x01\0\0\x05\x24\0\0\xc8\0\0\0\xf6\0\0\0\x2d\x01\0\0\x05\x24\0\0\xe0\
\0\0\0\xf6\0\0\0\x2d\x01\0\0\x05\x24\0\0\xe8\0\0\0\xf6\0\0\0\x6c\x01\0\0\x15\
\x30\0\0\xf8\0\0\0\xf6\0\0\0\x2d\x01\0\0\x05\x24\0\0\x10\x01\0\0\xf6\0\0\0\xa2\
\x01\0\0\x06\x38\0\0\x20\x01\0\0\xf6\0\0\0\0\0\0\0\0\0\0\0\x28\x01\0\0\xf6\0\0\
\0\xb3\x01\0\0\x02\x60\0\0\x40\x01\0\0\xf6\0\0\0\xdf\x01\0\0\x02\x64\0\0\x88\
\x01\0\0\xf6\0\0\0\x2d\x01\0\0\x05\x24\0\0\xa0\x01\0\0\xf6\0\0\0\x6c\x01\0\0\
\x15\x30\0\0\xb0\x01\0\0\xf6\0\0\0\x2d\x01\0\0\x05\x24\0\0\xc8\x01\0\0\xf6\0\0\
\0\xa2\x01\0\0\x06\x38\0\0\xd8\x01\0\0\xf6\0\0\0\0\0\0\0\0\0\0\0\xe0\x01\0\0\
\xf6\0\0\0\xb3\x01\0\0\x02\x60\0\0\xf8\x01\0\0\xf6\0\0\0\xdf\x01\0\0\x02\x64\0\
\0\x38\x02\0\0\xf6\0\0\0\0\0\0\0\0\0\0\0\x90\x02\0\0\xf6\0\0\0\x2d\x01\0\0\x05\
\x24\0\0\x56\x02\0\0\x0f\0\0\0\0\0\0\0\xf6\0\0\0\xec\x01\0\0\x05\x80\0\0\x50\0\
\0\0\xf6\0\0\0\xec\x01\0\0\x05\x80\0\0\x70\0\0\0\xf6\0\0\0\xec\x01\0\0\x05\x80\
\0\0\x80\0\0\0\xf6\0\0\0\xec\x01\0\0\x05\x80\0\0\x88\0\0\0\xf6\0\0\0\xec\x01\0\
\0\x05\x80\0\0\xa0\0\0\0\xf6\0\0\0\xec\x01\0\0\x05\x80\0\0\xa8\0\0\0\xf6\0\0\0\
\x6c\x01\0\0\x15\x8c\0\0\xb8\0\0\0\xf6\0\0\0\xec\x01\0\0\x05\x80\0\0\xd0\0\0\0\
\xf6\0\0\0\xa2\x01\0\0\x06\x94\0\0\xe0\0\0\0\xf6\0\0\0\xec\x01\0\0\x05\x80\0\0\
\xf0\0\0\0\xf6\0\0\0\x6c\x01\0\0\x15\x8c\0\0\0\x01\0\0\xf6\0\0\0\xec\x01\0\0\
\x05\x80\0\0\x18\x01\0\0\xf6\0\0\0\xa2\x01\0\0\x06\x94\0\0\x28\x01\0\0\xf6\0\0\
\0\0\0\0\0\0\0\0\0\xc0\x01\0\0\xf6\0\0\0\xec\x01\0\0\x05\x80\0\0\x10\0\0\0\x46\
\x02\0\0\x07\0\0\0\x20\0\0\0\x02\0\0\0\x1e\x02\0\0\0\0\0\0\x28\0\0\0\x02\0\0\0\
\x1e\x02\0\0\0\0\0\0\x60\0\0\0\x02\0\0\0\x23\x02\0\0\0\0\0\0\xa0\0\0\0\x02\0\0\
\0\x28\x02\0\0\0\0\0\0\x88\x01\0\0\x02\0\0\0\x1e\x02\0\0\0\0\0\0\x90\x01\0\0\
\x02\0\0\0\x23\x02\0\0\0\0\0\0\x98\x01\0\0\x02\0\0\0\x28\x02\0\0\0\0\0\0\x56\
\x02\0\0\x05\0\0\0\x20\0\0\0\x02\0\0\0\x1e\x02\0\0\0\0\0\0\x28\0\0\0\x02\0\0\0\
\x1e\x02\0\0\0\0\0\0\x60\0\0\0\x02\0\0\0\x23\x02\0\0\0\0\0\0\xe0\0\0\0\x02\0\0\
\0\x1e\x02\0\0\0\0\0\0\xe8\0\0\0\x02\0\0\0\x23\x02\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\x03\0\0\0\x20\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\x40\0\0\0\0\0\0\0\x17\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x09\0\0\0\x02\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\x58\x01\0\0\0\0\0\0\x98\x01\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\x08\0\0\0\0\0\0\0\
\x18\0\0\0\0\0\0\0\x11\0\0\0\x01\0\0\0\x06\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xf0\
\x02\0\0\0\0\0\0\xa0\x02\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x08\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\x21\0\0\0\x01\0\0\0\x06\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x90\x05\0\0\0\0\
\0\0\xd0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x08\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x2f\
\0\0\0\x01\0\0\0\x03\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x60\x07\0\0\0\0\0\0\x04\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x37\0\0\0\x01\0\0\
\0\x02\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x64\x07\0\0\0\0\0\0\x8f\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xe3\0\0\0\x09\0\0\0\x40\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\xf8\x07\0\0\0\0\0\0\x20\0\0\0\0\0\0\0\x02\0\0\0\x03\0\0\
\0\x08\0\0\0\0\0\0\0\x10\0\0\0\0\0\0\0\xf7\0\0\0\x09\0\0\0\x40\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\x18\x08\0\0\0\0\0\0\x20\0\0\0\0\0\0\0\x02\0\0\0\x04\0\0\0\x08\0\
\0\0\0\0\0\0\x10\0\0\0\0\0\0\0\x09\x01\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\x38\x08\0\0\0\0\0\0\xf4\x04\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x08\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\x0e\x01\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x30\
\x0d\0\0\0\0\0\0\x9c\x03\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x08\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0";

	*sz = sizeof(data) - 1;
	return (const void *)data;
}

#ifdef __cplusplus
struct ksyscall_bpf *ksyscall_bpf::open(const struct bpf_object_open_opts *opts) { return ksyscall_bpf__open_opts(opts); }
struct ksyscall_bpf *ksyscall_bpf::open_and_load() { return ksyscall_bpf__open_and_load(); }
int ksyscall_bpf::load(struct ksyscall_bpf *skel) { return ksyscall_bpf__load(skel); }
int ksyscall_bpf::attach(struct ksyscall_bpf *skel) { return ksyscall_bpf__attach(skel); }
void ksyscall_bpf::detach(struct ksyscall_bpf *skel) { ksyscall_bpf__detach(skel); }
void ksyscall_bpf::destroy(struct ksyscall_bpf *skel) { ksyscall_bpf__destroy(skel); }
const void *ksyscall_bpf::elf_bytes(size_t *sz) { return ksyscall_bpf__elf_bytes(sz); }
#endif /* __cplusplus */

__attribute__((unused)) static void
ksyscall_bpf__assert(struct ksyscall_bpf *s __attribute__((unused)))
{
#ifdef __cplusplus
#define _Static_assert static_assert
#endif
	_Static_assert(sizeof(s->kconfig->LINUX_HAS_SYSCALL_WRAPPER) == 1, "unexpected size of 'LINUX_HAS_SYSCALL_WRAPPER'");
#ifdef __cplusplus
#undef _Static_assert
#endif
}

#endif /* __KSYSCALL_BPF_SKEL_H__ */
