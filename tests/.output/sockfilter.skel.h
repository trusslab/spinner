/* SPDX-License-Identifier: (LGPL-2.1 OR BSD-2-Clause) */

/* THIS FILE IS AUTOGENERATED BY BPFTOOL! */
#ifndef __SOCKFILTER_BPF_SKEL_H__
#define __SOCKFILTER_BPF_SKEL_H__

#include <errno.h>
#include <stdlib.h>
#include <bpf/libbpf.h>

struct sockfilter_bpf {
	struct bpf_object_skeleton *skeleton;
	struct bpf_object *obj;
	struct {
		struct bpf_map *rb;
	} maps;
	struct {
		struct bpf_program *socket_handler;
	} progs;
	struct {
		struct bpf_link *socket_handler;
	} links;

#ifdef __cplusplus
	static inline struct sockfilter_bpf *open(const struct bpf_object_open_opts *opts = nullptr);
	static inline struct sockfilter_bpf *open_and_load();
	static inline int load(struct sockfilter_bpf *skel);
	static inline int attach(struct sockfilter_bpf *skel);
	static inline void detach(struct sockfilter_bpf *skel);
	static inline void destroy(struct sockfilter_bpf *skel);
	static inline const void *elf_bytes(size_t *sz);
#endif /* __cplusplus */
};

static void
sockfilter_bpf__destroy(struct sockfilter_bpf *obj)
{
	if (!obj)
		return;
	if (obj->skeleton)
		bpf_object__destroy_skeleton(obj->skeleton);
	free(obj);
}

static inline int
sockfilter_bpf__create_skeleton(struct sockfilter_bpf *obj);

static inline struct sockfilter_bpf *
sockfilter_bpf__open_opts(const struct bpf_object_open_opts *opts)
{
	struct sockfilter_bpf *obj;
	int err;

	obj = (struct sockfilter_bpf *)calloc(1, sizeof(*obj));
	if (!obj) {
		errno = ENOMEM;
		return NULL;
	}

	err = sockfilter_bpf__create_skeleton(obj);
	if (err)
		goto err_out;

	err = bpf_object__open_skeleton(obj->skeleton, opts);
	if (err)
		goto err_out;

	return obj;
err_out:
	sockfilter_bpf__destroy(obj);
	errno = -err;
	return NULL;
}

static inline struct sockfilter_bpf *
sockfilter_bpf__open(void)
{
	return sockfilter_bpf__open_opts(NULL);
}

static inline int
sockfilter_bpf__load(struct sockfilter_bpf *obj)
{
	return bpf_object__load_skeleton(obj->skeleton);
}

static inline struct sockfilter_bpf *
sockfilter_bpf__open_and_load(void)
{
	struct sockfilter_bpf *obj;
	int err;

	obj = sockfilter_bpf__open();
	if (!obj)
		return NULL;
	err = sockfilter_bpf__load(obj);
	if (err) {
		sockfilter_bpf__destroy(obj);
		errno = -err;
		return NULL;
	}
	return obj;
}

static inline int
sockfilter_bpf__attach(struct sockfilter_bpf *obj)
{
	return bpf_object__attach_skeleton(obj->skeleton);
}

static inline void
sockfilter_bpf__detach(struct sockfilter_bpf *obj)
{
	bpf_object__detach_skeleton(obj->skeleton);
}

static inline const void *sockfilter_bpf__elf_bytes(size_t *sz);

static inline int
sockfilter_bpf__create_skeleton(struct sockfilter_bpf *obj)
{
	struct bpf_object_skeleton *s;
	int err;

	s = (struct bpf_object_skeleton *)calloc(1, sizeof(*s));
	if (!s)	{
		err = -ENOMEM;
		goto err;
	}

	s->sz = sizeof(*s);
	s->name = "sockfilter_bpf";
	s->obj = &obj->obj;

	/* maps */
	s->map_cnt = 1;
	s->map_skel_sz = sizeof(*s->maps);
	s->maps = (struct bpf_map_skeleton *)calloc(s->map_cnt, s->map_skel_sz);
	if (!s->maps) {
		err = -ENOMEM;
		goto err;
	}

	s->maps[0].name = "rb";
	s->maps[0].map = &obj->maps.rb;

	/* programs */
	s->prog_cnt = 1;
	s->prog_skel_sz = sizeof(*s->progs);
	s->progs = (struct bpf_prog_skeleton *)calloc(s->prog_cnt, s->prog_skel_sz);
	if (!s->progs) {
		err = -ENOMEM;
		goto err;
	}

	s->progs[0].name = "socket_handler";
	s->progs[0].prog = &obj->progs.socket_handler;
	s->progs[0].link = &obj->links.socket_handler;

	s->data = sockfilter_bpf__elf_bytes(&s->data_sz);

	obj->skeleton = s;
	return 0;
err:
	bpf_object__destroy_skeleton(s);
	return err;
}

static inline const void *sockfilter_bpf__elf_bytes(size_t *sz)
{
	static const char data[] __attribute__((__aligned__(8))) = "\
\x7f\x45\x4c\x46\x02\x01\x01\0\0\0\0\0\0\0\0\0\x01\0\xf7\0\x01\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\xd0\x0f\0\0\0\0\0\0\0\0\0\0\x40\0\0\0\0\0\x40\0\x09\0\
\x01\0\0\x2e\x73\x74\x72\x74\x61\x62\0\x2e\x73\x79\x6d\x74\x61\x62\0\x73\x6f\
\x63\x6b\x65\x74\0\x6c\x69\x63\x65\x6e\x73\x65\0\x2e\x6d\x61\x70\x73\0\x73\x6f\
\x63\x6b\x66\x69\x6c\x74\x65\x72\x2e\x62\x70\x66\x2e\x63\0\x4c\x42\x42\x30\x5f\
\x36\0\x4c\x42\x42\x30\x5f\x35\0\x73\x6f\x63\x6b\x65\x74\x5f\x68\x61\x6e\x64\
\x6c\x65\x72\0\x72\x62\0\x4c\x49\x43\x45\x4e\x53\x45\0\x2e\x72\x65\x6c\x73\x6f\
\x63\x6b\x65\x74\0\x2e\x42\x54\x46\0\x2e\x42\x54\x46\x2e\x65\x78\x74\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x26\0\0\0\x04\0\xf1\xff\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\x03\0\x03\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x37\0\0\
\0\0\0\x03\0\x38\x02\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x3e\0\0\0\0\0\x03\0\x80\x01\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\x45\0\0\0\x12\0\x03\0\0\0\0\0\0\0\0\0\x48\x02\0\0\0\
\0\0\0\x54\0\0\0\x11\0\x05\0\0\0\0\0\0\0\0\0\x10\0\0\0\0\0\0\0\x57\0\0\0\x11\0\
\x04\0\0\0\0\0\0\0\0\0\x0d\0\0\0\0\0\0\0\xbf\x16\0\0\0\0\0\0\xbf\xa3\0\0\0\0\0\
\0\x07\x03\0\0\xfa\xff\xff\xff\xb7\x02\0\0\x0c\0\0\0\xb7\x04\0\0\x02\0\0\0\x85\
\0\0\0\x1a\0\0\0\x69\xa1\xfa\xff\0\0\0\0\xbf\x12\0\0\0\0\0\0\xdc\x02\0\0\x10\0\
\0\0\x6b\x2a\xfa\xff\0\0\0\0\xb7\x08\0\0\0\0\0\0\x55\x01\x3b\0\x08\0\0\0\xbf\
\xa3\0\0\0\0\0\0\x07\x03\0\0\xfe\xff\xff\xff\xbf\x61\0\0\0\0\0\0\xb7\x02\0\0\
\x14\0\0\0\xb7\x04\0\0\x02\0\0\0\x85\0\0\0\x1a\0\0\0\x69\xa1\xfe\xff\0\0\0\0\
\x57\x01\0\0\x3f\xff\0\0\x55\x01\x32\0\0\0\0\0\xb7\x08\0\0\0\0\0\0\x18\x01\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\xb7\x02\0\0\x18\0\0\0\xb7\x03\0\0\0\0\0\0\x85\0\0\0\
\x83\0\0\0\xbf\x07\0\0\0\0\0\0\x15\x07\x2a\0\0\0\0\0\xbf\x73\0\0\0\0\0\0\x07\
\x03\0\0\x0c\0\0\0\xbf\x61\0\0\0\0\0\0\xb7\x02\0\0\x17\0\0\0\xb7\x04\0\0\x01\0\
\0\0\x85\0\0\0\x1a\0\0\0\x61\x71\x0c\0\0\0\0\0\x15\x01\x0b\0\x2f\0\0\0\xbf\x61\
\0\0\0\0\0\0\xb7\x02\0\0\x1a\0\0\0\xbf\x73\0\0\0\0\0\0\xb7\x04\0\0\x04\0\0\0\
\x85\0\0\0\x1a\0\0\0\xbf\x73\0\0\0\0\0\0\x07\x03\0\0\x04\0\0\0\xbf\x61\0\0\0\0\
\0\0\xb7\x02\0\0\x1e\0\0\0\xb7\x04\0\0\x04\0\0\0\x85\0\0\0\x1a\0\0\0\xbf\xa3\0\
\0\0\0\0\0\x07\x03\0\0\xfd\xff\xff\xff\xbf\x61\0\0\0\0\0\0\xb7\x02\0\0\x0e\0\0\
\0\xb7\x04\0\0\x01\0\0\0\x85\0\0\0\x1a\0\0\0\x71\xa2\xfd\xff\0\0\0\0\x67\x02\0\
\0\x02\0\0\0\x57\x02\0\0\x3c\0\0\0\x07\x02\0\0\x0e\0\0\0\xbf\x73\0\0\0\0\0\0\
\x07\x03\0\0\x08\0\0\0\xbf\x61\0\0\0\0\0\0\xb7\x04\0\0\x04\0\0\0\x85\0\0\0\x1a\
\0\0\0\x61\x61\x04\0\0\0\0\0\x63\x17\x10\0\0\0\0\0\x61\x61\x28\0\0\0\0\0\x63\
\x17\x14\0\0\0\0\0\xbf\x71\0\0\0\0\0\0\xb7\x02\0\0\0\0\0\0\x85\0\0\0\x84\0\0\0\
\x61\x68\0\0\0\0\0\0\xbf\x80\0\0\0\0\0\0\x95\0\0\0\0\0\0\0\x44\x75\x61\x6c\x20\
\x42\x53\x44\x2f\x47\x50\x4c\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xb0\0\0\0\
\0\0\0\0\x01\0\0\0\x06\0\0\0\x9f\xeb\x01\0\x18\0\0\0\0\0\0\0\xb8\x03\0\0\xb8\
\x03\0\0\xb0\x05\0\0\0\0\0\0\0\0\0\x02\x03\0\0\0\x01\0\0\0\0\0\0\x01\x04\0\0\0\
\x20\0\0\x01\0\0\0\0\0\0\0\x03\0\0\0\0\x02\0\0\0\x04\0\0\0\x1b\0\0\0\x05\0\0\0\
\0\0\0\x01\x04\0\0\0\x20\0\0\0\0\0\0\0\0\0\0\x02\x06\0\0\0\0\0\0\0\0\0\0\x03\0\
\0\0\0\x02\0\0\0\x04\0\0\0\0\0\x04\0\0\0\0\0\x02\0\0\x04\x10\0\0\0\x19\0\0\0\
\x01\0\0\0\0\0\0\0\x1e\0\0\0\x05\0\0\0\x40\0\0\0\x2a\0\0\0\0\0\0\x0e\x07\0\0\0\
\x01\0\0\0\0\0\0\0\0\0\0\x02\x0a\0\0\0\x2d\0\0\0\x22\0\0\x04\xc0\0\0\0\x37\0\0\
\0\x0b\0\0\0\0\0\0\0\x3b\0\0\0\x0b\0\0\0\x20\0\0\0\x44\0\0\0\x0b\0\0\0\x40\0\0\
\0\x49\0\0\0\x0b\0\0\0\x60\0\0\0\x57\0\0\0\x0b\0\0\0\x80\0\0\0\x60\0\0\0\x0b\0\
\0\0\xa0\0\0\0\x6d\0\0\0\x0b\0\0\0\xc0\0\0\0\x76\0\0\0\x0b\0\0\0\xe0\0\0\0\x81\
\0\0\0\x0b\0\0\0\0\x01\0\0\x8a\0\0\0\x0b\0\0\0\x20\x01\0\0\x9a\0\0\0\x0b\0\0\0\
\x40\x01\0\0\xa2\0\0\0\x0b\0\0\0\x60\x01\0\0\xab\0\0\0\x0d\0\0\0\x80\x01\0\0\
\xae\0\0\0\x0b\0\0\0\x20\x02\0\0\xb3\0\0\0\x0b\0\0\0\x40\x02\0\0\xbe\0\0\0\x0b\
\0\0\0\x60\x02\0\0\xc3\0\0\0\x0b\0\0\0\x80\x02\0\0\xcc\0\0\0\x0b\0\0\0\xa0\x02\
\0\0\xd4\0\0\0\x0b\0\0\0\xc0\x02\0\0\xdb\0\0\0\x0b\0\0\0\xe0\x02\0\0\xe6\0\0\0\
\x0b\0\0\0\0\x03\0\0\xf0\0\0\0\x0e\0\0\0\x20\x03\0\0\xfb\0\0\0\x0e\0\0\0\xa0\
\x03\0\0\x05\x01\0\0\x0b\0\0\0\x20\x04\0\0\x11\x01\0\0\x0b\0\0\0\x40\x04\0\0\
\x1c\x01\0\0\x0b\0\0\0\x60\x04\0\0\0\0\0\0\x0f\0\0\0\x80\x04\0\0\x26\x01\0\0\
\x11\0\0\0\xc0\x04\0\0\x2d\x01\0\0\x0b\0\0\0\0\x05\0\0\x36\x01\0\0\x0b\0\0\0\
\x20\x05\0\0\0\0\0\0\x13\0\0\0\x40\x05\0\0\x3f\x01\0\0\x0b\0\0\0\x80\x05\0\0\
\x48\x01\0\0\x15\0\0\0\xa0\x05\0\0\x54\x01\0\0\x11\0\0\0\xc0\x05\0\0\x5d\x01\0\
\0\0\0\0\x08\x0c\0\0\0\x63\x01\0\0\0\0\0\x01\x04\0\0\0\x20\0\0\0\0\0\0\0\0\0\0\
\x03\0\0\0\0\x0b\0\0\0\x04\0\0\0\x05\0\0\0\0\0\0\0\0\0\0\x03\0\0\0\0\x0b\0\0\0\
\x04\0\0\0\x04\0\0\0\0\0\0\0\x01\0\0\x05\x08\0\0\0\x70\x01\0\0\x10\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\x02\x1c\0\0\0\x7a\x01\0\0\0\0\0\x08\x12\0\0\0\x80\x01\0\0\0\0\
\0\x01\x08\0\0\0\x40\0\0\0\0\0\0\0\x01\0\0\x05\x08\0\0\0\x93\x01\0\0\x14\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\x02\x1d\0\0\0\x96\x01\0\0\0\0\0\x08\x16\0\0\0\x9b\x01\0\
\0\0\0\0\x01\x01\0\0\0\x08\0\0\0\0\0\0\0\x01\0\0\x0d\x02\0\0\0\xa9\x01\0\0\x09\
\0\0\0\xad\x01\0\0\x01\0\0\x0c\x17\0\0\0\xbc\x01\0\0\0\0\0\x01\x01\0\0\0\x08\0\
\0\x01\0\0\0\0\0\0\0\x03\0\0\0\0\x19\0\0\0\x04\0\0\0\x0d\0\0\0\xc1\x01\0\0\0\0\
\0\x0e\x1a\0\0\0\x01\0\0\0\xc9\x01\0\0\0\0\0\x07\0\0\0\0\xd7\x01\0\0\0\0\0\x07\
\0\0\0\0\x9b\x05\0\0\x01\0\0\x0f\x0d\0\0\0\x1b\0\0\0\0\0\0\0\x0d\0\0\0\xa3\x05\
\0\0\x01\0\0\x0f\x10\0\0\0\x08\0\0\0\0\0\0\0\x10\0\0\0\0\x69\x6e\x74\0\x5f\x5f\
\x41\x52\x52\x41\x59\x5f\x53\x49\x5a\x45\x5f\x54\x59\x50\x45\x5f\x5f\0\x74\x79\
\x70\x65\0\x6d\x61\x78\x5f\x65\x6e\x74\x72\x69\x65\x73\0\x72\x62\0\x5f\x5f\x73\
\x6b\x5f\x62\x75\x66\x66\0\x6c\x65\x6e\0\x70\x6b\x74\x5f\x74\x79\x70\x65\0\x6d\
\x61\x72\x6b\0\x71\x75\x65\x75\x65\x5f\x6d\x61\x70\x70\x69\x6e\x67\0\x70\x72\
\x6f\x74\x6f\x63\x6f\x6c\0\x76\x6c\x61\x6e\x5f\x70\x72\x65\x73\x65\x6e\x74\0\
\x76\x6c\x61\x6e\x5f\x74\x63\x69\0\x76\x6c\x61\x6e\x5f\x70\x72\x6f\x74\x6f\0\
\x70\x72\x69\x6f\x72\x69\x74\x79\0\x69\x6e\x67\x72\x65\x73\x73\x5f\x69\x66\x69\
\x6e\x64\x65\x78\0\x69\x66\x69\x6e\x64\x65\x78\0\x74\x63\x5f\x69\x6e\x64\x65\
\x78\0\x63\x62\0\x68\x61\x73\x68\0\x74\x63\x5f\x63\x6c\x61\x73\x73\x69\x64\0\
\x64\x61\x74\x61\0\x64\x61\x74\x61\x5f\x65\x6e\x64\0\x6e\x61\x70\x69\x5f\x69\
\x64\0\x66\x61\x6d\x69\x6c\x79\0\x72\x65\x6d\x6f\x74\x65\x5f\x69\x70\x34\0\x6c\
\x6f\x63\x61\x6c\x5f\x69\x70\x34\0\x72\x65\x6d\x6f\x74\x65\x5f\x69\x70\x36\0\
\x6c\x6f\x63\x61\x6c\x5f\x69\x70\x36\0\x72\x65\x6d\x6f\x74\x65\x5f\x70\x6f\x72\
\x74\0\x6c\x6f\x63\x61\x6c\x5f\x70\x6f\x72\x74\0\x64\x61\x74\x61\x5f\x6d\x65\
\x74\x61\0\x74\x73\x74\x61\x6d\x70\0\x77\x69\x72\x65\x5f\x6c\x65\x6e\0\x67\x73\
\x6f\x5f\x73\x65\x67\x73\0\x67\x73\x6f\x5f\x73\x69\x7a\x65\0\x74\x73\x74\x61\
\x6d\x70\x5f\x74\x79\x70\x65\0\x68\x77\x74\x73\x74\x61\x6d\x70\0\x5f\x5f\x75\
\x33\x32\0\x75\x6e\x73\x69\x67\x6e\x65\x64\x20\x69\x6e\x74\0\x66\x6c\x6f\x77\
\x5f\x6b\x65\x79\x73\0\x5f\x5f\x75\x36\x34\0\x75\x6e\x73\x69\x67\x6e\x65\x64\
\x20\x6c\x6f\x6e\x67\x20\x6c\x6f\x6e\x67\0\x73\x6b\0\x5f\x5f\x75\x38\0\x75\x6e\
\x73\x69\x67\x6e\x65\x64\x20\x63\x68\x61\x72\0\x73\x6b\x62\0\x73\x6f\x63\x6b\
\x65\x74\x5f\x68\x61\x6e\x64\x6c\x65\x72\0\x63\x68\x61\x72\0\x4c\x49\x43\x45\
\x4e\x53\x45\0\x62\x70\x66\x5f\x66\x6c\x6f\x77\x5f\x6b\x65\x79\x73\0\x62\x70\
\x66\x5f\x73\x6f\x63\x6b\0\x2f\x68\x6f\x6d\x65\x2f\x70\x72\x69\x79\x61\x2f\x6c\
\x69\x62\x62\x70\x66\x2d\x62\x6f\x6f\x74\x73\x74\x72\x61\x70\x2f\x65\x78\x61\
\x6d\x70\x6c\x65\x73\x2f\x63\x2f\x73\x6f\x63\x6b\x66\x69\x6c\x74\x65\x72\x2e\
\x62\x70\x66\x2e\x63\0\x69\x6e\x74\x20\x73\x6f\x63\x6b\x65\x74\x5f\x68\x61\x6e\
\x64\x6c\x65\x72\x28\x73\x74\x72\x75\x63\x74\x20\x5f\x5f\x73\x6b\x5f\x62\x75\
\x66\x66\x20\x2a\x73\x6b\x62\x29\0\x09\x62\x70\x66\x5f\x73\x6b\x62\x5f\x6c\x6f\
\x61\x64\x5f\x62\x79\x74\x65\x73\x28\x73\x6b\x62\x2c\x20\x31\x32\x2c\x20\x26\
\x70\x72\x6f\x74\x6f\x2c\x20\x32\x29\x3b\0\x09\x70\x72\x6f\x74\x6f\x20\x3d\x20\
\x5f\x5f\x62\x70\x66\x5f\x6e\x74\x6f\x68\x73\x28\x70\x72\x6f\x74\x6f\x29\x3b\0\
\x09\x69\x66\x20\x28\x70\x72\x6f\x74\x6f\x20\x21\x3d\x20\x45\x54\x48\x5f\x50\
\x5f\x49\x50\x29\0\x09\x62\x70\x66\x5f\x73\x6b\x62\x5f\x6c\x6f\x61\x64\x5f\x62\
\x79\x74\x65\x73\x28\x73\x6b\x62\x2c\x20\x6e\x68\x6f\x66\x66\x20\x2b\x20\x6f\
\x66\x66\x73\x65\x74\x6f\x66\x28\x73\x74\x72\x75\x63\x74\x20\x69\x70\x68\x64\
\x72\x2c\x20\x66\x72\x61\x67\x5f\x6f\x66\x66\x29\x2c\x20\x26\x66\x72\x61\x67\
\x5f\x6f\x66\x66\x2c\x20\x32\x29\x3b\0\x09\x66\x72\x61\x67\x5f\x6f\x66\x66\x20\
\x3d\x20\x5f\x5f\x62\x70\x66\x5f\x6e\x74\x6f\x68\x73\x28\x66\x72\x61\x67\x5f\
\x6f\x66\x66\x29\x3b\0\x09\x72\x65\x74\x75\x72\x6e\x20\x66\x72\x61\x67\x5f\x6f\
\x66\x66\x20\x26\x20\x28\x49\x50\x5f\x4d\x46\x20\x7c\x20\x49\x50\x5f\x4f\x46\
\x46\x53\x45\x54\x29\x3b\0\x09\x69\x66\x20\x28\x69\x70\x5f\x69\x73\x5f\x66\x72\
\x61\x67\x6d\x65\x6e\x74\x28\x73\x6b\x62\x2c\x20\x6e\x68\x6f\x66\x66\x29\x29\0\
\x09\x65\x20\x3d\x20\x62\x70\x66\x5f\x72\x69\x6e\x67\x62\x75\x66\x5f\x72\x65\
\x73\x65\x72\x76\x65\x28\x26\x72\x62\x2c\x20\x73\x69\x7a\x65\x6f\x66\x28\x2a\
\x65\x29\x2c\x20\x30\x29\x3b\0\x09\x69\x66\x20\x28\x21\x65\x29\0\x09\x62\x70\
\x66\x5f\x73\x6b\x62\x5f\x6c\x6f\x61\x64\x5f\x62\x79\x74\x65\x73\x28\x73\x6b\
\x62\x2c\x20\x6e\x68\x6f\x66\x66\x20\x2b\x20\x6f\x66\x66\x73\x65\x74\x6f\x66\
\x28\x73\x74\x72\x75\x63\x74\x20\x69\x70\x68\x64\x72\x2c\x20\x70\x72\x6f\x74\
\x6f\x63\x6f\x6c\x29\x2c\x20\x26\x65\x2d\x3e\x69\x70\x5f\x70\x72\x6f\x74\x6f\
\x2c\x20\x31\x29\x3b\0\x09\x69\x66\x20\x28\x65\x2d\x3e\x69\x70\x5f\x70\x72\x6f\
\x74\x6f\x20\x21\x3d\x20\x49\x50\x50\x52\x4f\x54\x4f\x5f\x47\x52\x45\x29\x20\
\x7b\0\x09\x09\x62\x70\x66\x5f\x73\x6b\x62\x5f\x6c\x6f\x61\x64\x5f\x62\x79\x74\
\x65\x73\x28\x73\x6b\x62\x2c\x20\x6e\x68\x6f\x66\x66\x20\x2b\x20\x6f\x66\x66\
\x73\x65\x74\x6f\x66\x28\x73\x74\x72\x75\x63\x74\x20\x69\x70\x68\x64\x72\x2c\
\x20\x73\x61\x64\x64\x72\x29\x2c\x20\x26\x28\x65\x2d\x3e\x73\x72\x63\x5f\x61\
\x64\x64\x72\x29\x2c\x20\x34\x29\x3b\0\x09\x09\x62\x70\x66\x5f\x73\x6b\x62\x5f\
\x6c\x6f\x61\x64\x5f\x62\x79\x74\x65\x73\x28\x73\x6b\x62\x2c\x20\x6e\x68\x6f\
\x66\x66\x20\x2b\x20\x6f\x66\x66\x73\x65\x74\x6f\x66\x28\x73\x74\x72\x75\x63\
\x74\x20\x69\x70\x68\x64\x72\x2c\x20\x64\x61\x64\x64\x72\x29\x2c\x20\x26\x28\
\x65\x2d\x3e\x64\x73\x74\x5f\x61\x64\x64\x72\x29\x2c\x20\x34\x29\x3b\0\x09\x62\
\x70\x66\x5f\x73\x6b\x62\x5f\x6c\x6f\x61\x64\x5f\x62\x79\x74\x65\x73\x28\x73\
\x6b\x62\x2c\x20\x6e\x68\x6f\x66\x66\x20\x2b\x20\x30\x2c\x20\x26\x76\x65\x72\
\x6c\x65\x6e\x2c\x20\x31\x29\x3b\0\x09\x62\x70\x66\x5f\x73\x6b\x62\x5f\x6c\x6f\
\x61\x64\x5f\x62\x79\x74\x65\x73\x28\x73\x6b\x62\x2c\x20\x6e\x68\x6f\x66\x66\
\x20\x2b\x20\x28\x28\x76\x65\x72\x6c\x65\x6e\x20\x26\x20\x30\x78\x46\x29\x20\
\x3c\x3c\x20\x32\x29\x2c\x20\x26\x28\x65\x2d\x3e\x70\x6f\x72\x74\x73\x29\x2c\
\x20\x34\x29\x3b\0\x09\x65\x2d\x3e\x70\x6b\x74\x5f\x74\x79\x70\x65\x20\x3d\x20\
\x73\x6b\x62\x2d\x3e\x70\x6b\x74\x5f\x74\x79\x70\x65\x3b\0\x09\x65\x2d\x3e\x69\
\x66\x69\x6e\x64\x65\x78\x20\x3d\x20\x73\x6b\x62\x2d\x3e\x69\x66\x69\x6e\x64\
\x65\x78\x3b\0\x09\x62\x70\x66\x5f\x72\x69\x6e\x67\x62\x75\x66\x5f\x73\x75\x62\
\x6d\x69\x74\x28\x65\x2c\x20\x30\x29\x3b\0\x09\x72\x65\x74\x75\x72\x6e\x20\x73\
\x6b\x62\x2d\x3e\x6c\x65\x6e\x3b\0\x7d\0\x6c\x69\x63\x65\x6e\x73\x65\0\x2e\x6d\
\x61\x70\x73\0\x73\x6f\x63\x6b\x65\x74\0\x9f\xeb\x01\0\x20\0\0\0\0\0\0\0\x14\0\
\0\0\x14\0\0\0\x2c\x02\0\0\x40\x02\0\0\0\0\0\0\x08\0\0\0\xa9\x05\0\0\x01\0\0\0\
\0\0\0\0\x18\0\0\0\x10\0\0\0\xa9\x05\0\0\x22\0\0\0\0\0\0\0\xe0\x01\0\0\x19\x02\
\0\0\0\x80\0\0\x10\0\0\0\xe0\x01\0\0\0\0\0\0\0\0\0\0\x18\0\0\0\xe0\x01\0\0\x43\
\x02\0\0\x02\x9c\0\0\x30\0\0\0\xe0\x01\0\0\x6c\x02\0\0\x0a\xa0\0\0\x48\0\0\0\
\xe0\x01\0\0\x6c\x02\0\0\x08\xa0\0\0\x58\0\0\0\xe0\x01\0\0\x89\x02\0\0\x06\xa4\
\0\0\x68\0\0\0\xe0\x01\0\0\0\0\0\0\0\0\0\0\x70\0\0\0\xe0\x01\0\0\xa1\x02\0\0\
\x02\x68\0\0\x90\0\0\0\xe0\x01\0\0\xf3\x02\0\0\x0d\x6c\0\0\x98\0\0\0\xe0\x01\0\
\0\x16\x03\0\0\x12\x70\0\0\xa0\0\0\0\xe0\x01\0\0\x3e\x03\0\0\x06\xb0\0\0\xb0\0\
\0\0\xe0\x01\0\0\x5f\x03\0\0\x06\xc0\0\0\xe0\0\0\0\xe0\x01\0\0\x8d\x03\0\0\x06\
\xc4\0\0\xe8\0\0\0\xe0\x01\0\0\x96\x03\0\0\x48\xd0\0\0\xf8\0\0\0\xe0\x01\0\0\
\x96\x03\0\0\x02\xd0\0\0\x18\x01\0\0\xe0\x01\0\0\xeb\x03\0\0\x09\xd8\0\0\x20\
\x01\0\0\xe0\x01\0\0\xeb\x03\0\0\x06\xd8\0\0\x28\x01\0\0\xe0\x01\0\0\x0e\x04\0\
\0\x03\xdc\0\0\x50\x01\0\0\xe0\x01\0\0\x63\x04\0\0\x47\xe0\0\0\x60\x01\0\0\xe0\
\x01\0\0\x63\x04\0\0\x03\xe0\0\0\x88\x01\0\0\xe0\x01\0\0\0\0\0\0\0\0\0\0\x90\
\x01\0\0\xe0\x01\0\0\xb8\x04\0\0\x02\xec\0\0\xb0\x01\0\0\xe0\x01\0\0\xe9\x04\0\
\0\x24\xf0\0\0\xb8\x01\0\0\xe0\x01\0\0\xe9\x04\0\0\x32\xf0\0\0\xc8\x01\0\0\xe0\
\x01\0\0\xe9\x04\0\0\x20\xf0\0\0\xd0\x01\0\0\xe0\x01\0\0\xe9\x04\0\0\x3e\xf0\0\
\0\xe0\x01\0\0\xe0\x01\0\0\xe9\x04\0\0\x02\xf0\0\0\xf8\x01\0\0\xe0\x01\0\0\x32\
\x05\0\0\x15\xf4\0\0\0\x02\0\0\xe0\x01\0\0\x32\x05\0\0\x0e\xf4\0\0\x08\x02\0\0\
\xe0\x01\0\0\x50\x05\0\0\x14\xf8\0\0\x10\x02\0\0\xe0\x01\0\0\x50\x05\0\0\x0d\
\xf8\0\0\x18\x02\0\0\xe0\x01\0\0\x6c\x05\0\0\x02\xfc\0\0\x30\x02\0\0\xe0\x01\0\
\0\x87\x05\0\0\x0e\x04\x01\0\x38\x02\0\0\xe0\x01\0\0\x99\x05\0\0\x01\x08\x01\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\x03\0\0\0\x20\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\x40\0\0\0\0\0\0\0\x78\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x09\0\0\0\x02\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\xb8\0\0\0\0\0\0\0\xc0\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\x08\0\0\0\0\0\0\
\0\x18\0\0\0\0\0\0\0\x11\0\0\0\x01\0\0\0\x06\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x78\
\x01\0\0\0\0\0\0\x48\x02\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x08\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\x18\0\0\0\x01\0\0\0\x03\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xc0\x03\0\0\0\0\
\0\0\x0d\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x20\0\
\0\0\x01\0\0\0\x03\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xd0\x03\0\0\0\0\0\0\x10\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\x08\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x5f\0\0\0\x09\0\0\0\
\x40\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xe0\x03\0\0\0\0\0\0\x10\0\0\0\0\0\0\0\x02\0\
\0\0\x03\0\0\0\x08\0\0\0\0\0\0\0\x10\0\0\0\0\0\0\0\x6a\0\0\0\x01\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\xf0\x03\0\0\0\0\0\0\x80\x09\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\x08\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x6f\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\x70\x0d\0\0\0\0\0\0\x60\x02\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x08\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0";

	*sz = sizeof(data) - 1;
	return (const void *)data;
}

#ifdef __cplusplus
struct sockfilter_bpf *sockfilter_bpf::open(const struct bpf_object_open_opts *opts) { return sockfilter_bpf__open_opts(opts); }
struct sockfilter_bpf *sockfilter_bpf::open_and_load() { return sockfilter_bpf__open_and_load(); }
int sockfilter_bpf::load(struct sockfilter_bpf *skel) { return sockfilter_bpf__load(skel); }
int sockfilter_bpf::attach(struct sockfilter_bpf *skel) { return sockfilter_bpf__attach(skel); }
void sockfilter_bpf::detach(struct sockfilter_bpf *skel) { sockfilter_bpf__detach(skel); }
void sockfilter_bpf::destroy(struct sockfilter_bpf *skel) { sockfilter_bpf__destroy(skel); }
const void *sockfilter_bpf::elf_bytes(size_t *sz) { return sockfilter_bpf__elf_bytes(sz); }
#endif /* __cplusplus */

__attribute__((unused)) static void
sockfilter_bpf__assert(struct sockfilter_bpf *s __attribute__((unused)))
{
#ifdef __cplusplus
#define _Static_assert static_assert
#endif
#ifdef __cplusplus
#undef _Static_assert
#endif
}

#endif /* __SOCKFILTER_BPF_SKEL_H__ */
