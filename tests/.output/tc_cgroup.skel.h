/* SPDX-License-Identifier: (LGPL-2.1 OR BSD-2-Clause) */

/* THIS FILE IS AUTOGENERATED BY BPFTOOL! */
#ifndef __TC_CGROUP_BPF_SKEL_H__
#define __TC_CGROUP_BPF_SKEL_H__

#include <errno.h>
#include <stdlib.h>
#include <bpf/libbpf.h>

struct tc_cgroup_bpf {
	struct bpf_object_skeleton *skeleton;
	struct bpf_object *obj;
	struct {
		struct bpf_map *rodata;
	} maps;
	struct {
		struct bpf_program *tc_ingress;
	} progs;
	struct {
		struct bpf_link *tc_ingress;
	} links;

#ifdef __cplusplus
	static inline struct tc_cgroup_bpf *open(const struct bpf_object_open_opts *opts = nullptr);
	static inline struct tc_cgroup_bpf *open_and_load();
	static inline int load(struct tc_cgroup_bpf *skel);
	static inline int attach(struct tc_cgroup_bpf *skel);
	static inline void detach(struct tc_cgroup_bpf *skel);
	static inline void destroy(struct tc_cgroup_bpf *skel);
	static inline const void *elf_bytes(size_t *sz);
#endif /* __cplusplus */
};

static void
tc_cgroup_bpf__destroy(struct tc_cgroup_bpf *obj)
{
	if (!obj)
		return;
	if (obj->skeleton)
		bpf_object__destroy_skeleton(obj->skeleton);
	free(obj);
}

static inline int
tc_cgroup_bpf__create_skeleton(struct tc_cgroup_bpf *obj);

static inline struct tc_cgroup_bpf *
tc_cgroup_bpf__open_opts(const struct bpf_object_open_opts *opts)
{
	struct tc_cgroup_bpf *obj;
	int err;

	obj = (struct tc_cgroup_bpf *)calloc(1, sizeof(*obj));
	if (!obj) {
		errno = ENOMEM;
		return NULL;
	}

	err = tc_cgroup_bpf__create_skeleton(obj);
	if (err)
		goto err_out;

	err = bpf_object__open_skeleton(obj->skeleton, opts);
	if (err)
		goto err_out;

	return obj;
err_out:
	tc_cgroup_bpf__destroy(obj);
	errno = -err;
	return NULL;
}

static inline struct tc_cgroup_bpf *
tc_cgroup_bpf__open(void)
{
	return tc_cgroup_bpf__open_opts(NULL);
}

static inline int
tc_cgroup_bpf__load(struct tc_cgroup_bpf *obj)
{
	return bpf_object__load_skeleton(obj->skeleton);
}

static inline struct tc_cgroup_bpf *
tc_cgroup_bpf__open_and_load(void)
{
	struct tc_cgroup_bpf *obj;
	int err;

	obj = tc_cgroup_bpf__open();
	if (!obj)
		return NULL;
	err = tc_cgroup_bpf__load(obj);
	if (err) {
		tc_cgroup_bpf__destroy(obj);
		errno = -err;
		return NULL;
	}
	return obj;
}

static inline int
tc_cgroup_bpf__attach(struct tc_cgroup_bpf *obj)
{
	return bpf_object__attach_skeleton(obj->skeleton);
}

static inline void
tc_cgroup_bpf__detach(struct tc_cgroup_bpf *obj)
{
	bpf_object__detach_skeleton(obj->skeleton);
}

static inline const void *tc_cgroup_bpf__elf_bytes(size_t *sz);

static inline int
tc_cgroup_bpf__create_skeleton(struct tc_cgroup_bpf *obj)
{
	struct bpf_object_skeleton *s;
	int err;

	s = (struct bpf_object_skeleton *)calloc(1, sizeof(*s));
	if (!s)	{
		err = -ENOMEM;
		goto err;
	}

	s->sz = sizeof(*s);
	s->name = "tc_cgroup_bpf";
	s->obj = &obj->obj;

	/* maps */
	s->map_cnt = 1;
	s->map_skel_sz = sizeof(*s->maps);
	s->maps = (struct bpf_map_skeleton *)calloc(s->map_cnt, s->map_skel_sz);
	if (!s->maps) {
		err = -ENOMEM;
		goto err;
	}

	s->maps[0].name = "tc_cgrou.rodata";
	s->maps[0].map = &obj->maps.rodata;

	/* programs */
	s->prog_cnt = 1;
	s->prog_skel_sz = sizeof(*s->progs);
	s->progs = (struct bpf_prog_skeleton *)calloc(s->prog_cnt, s->prog_skel_sz);
	if (!s->progs) {
		err = -ENOMEM;
		goto err;
	}

	s->progs[0].name = "tc_ingress";
	s->progs[0].prog = &obj->progs.tc_ingress;
	s->progs[0].link = &obj->links.tc_ingress;

	s->data = tc_cgroup_bpf__elf_bytes(&s->data_sz);

	obj->skeleton = s;
	return 0;
err:
	bpf_object__destroy_skeleton(s);
	return err;
}

static inline const void *tc_cgroup_bpf__elf_bytes(size_t *sz)
{
	static const char data[] __attribute__((__aligned__(8))) = "\
\x7f\x45\x4c\x46\x02\x01\x01\0\0\0\0\0\0\0\0\0\x01\0\xf7\0\x01\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\xb0\x0b\0\0\0\0\0\0\0\0\0\0\x40\0\0\0\0\0\x40\0\x09\0\
\x01\0\0\x2e\x73\x74\x72\x74\x61\x62\0\x2e\x73\x79\x6d\x74\x61\x62\0\x74\x63\0\
\x2e\x72\x6f\x64\x61\x74\x61\0\x6c\x69\x63\x65\x6e\x73\x65\0\x74\x63\x5f\x63\
\x67\x72\x6f\x75\x70\x2e\x62\x70\x66\x2e\x63\0\x4c\x42\x42\x30\x5f\x34\0\x74\
\x63\x5f\x69\x6e\x67\x72\x65\x73\x73\x2e\x5f\x5f\x5f\x5f\x66\x6d\x74\0\x74\x63\
\x5f\x69\x6e\x67\x72\x65\x73\x73\0\x5f\x5f\x6c\x69\x63\x65\x6e\x73\x65\0\x2e\
\x72\x65\x6c\x74\x63\0\x2e\x42\x54\x46\0\x2e\x42\x54\x46\x2e\x65\x78\x74\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x24\0\0\0\x04\0\xf1\xff\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x03\0\x03\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x34\
\0\0\0\0\0\x03\0\x90\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x3b\0\0\0\x01\0\x04\0\0\0\0\
\0\0\0\0\0\x24\0\0\0\0\0\0\0\0\0\0\0\x03\0\x04\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\x4e\0\0\0\x12\0\x03\0\0\0\0\0\0\0\0\0\xa0\0\0\0\0\0\0\0\x59\0\0\0\x11\0\x05\
\0\0\0\0\0\0\0\0\0\x04\0\0\0\0\0\0\0\x61\x12\x50\0\0\0\0\0\x61\x13\x10\0\0\0\0\
\0\x55\x03\x0f\0\x08\0\0\0\x61\x11\x4c\0\0\0\0\0\xbf\x13\0\0\0\0\0\0\x07\x03\0\
\0\x0e\0\0\0\x2d\x23\x0b\0\0\0\0\0\xbf\x13\0\0\0\0\0\0\x07\x03\0\0\x22\0\0\0\
\x2d\x23\x08\0\0\0\0\0\x07\x01\0\0\x0e\0\0\0\x71\x14\x08\0\0\0\0\0\x69\x13\x02\
\0\0\0\0\0\xdc\x03\0\0\x10\0\0\0\x18\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xb7\x02\0\
\0\x24\0\0\0\x85\0\0\0\x06\0\0\0\xb7\0\0\0\0\0\0\0\x95\0\0\0\0\0\0\0\x47\x6f\
\x74\x20\x49\x50\x20\x70\x61\x63\x6b\x65\x74\x3a\x20\x74\x6f\x74\x5f\x6c\x65\
\x6e\x3a\x20\x25\x64\x2c\x20\x74\x74\x6c\x3a\x20\x25\x64\0\x47\x50\x4c\0\x70\0\
\0\0\0\0\0\0\x01\0\0\0\x05\0\0\0\x9f\xeb\x01\0\x18\0\0\0\0\0\0\0\x7c\x04\0\0\
\x7c\x04\0\0\xab\x03\0\0\0\0\0\0\0\0\0\x02\x02\0\0\0\x01\0\0\0\x22\0\0\x04\xc0\
\0\0\0\x0b\0\0\0\x03\0\0\0\0\0\0\0\x0f\0\0\0\x03\0\0\0\x20\0\0\0\x18\0\0\0\x03\
\0\0\0\x40\0\0\0\x1d\0\0\0\x03\0\0\0\x60\0\0\0\x2b\0\0\0\x03\0\0\0\x80\0\0\0\
\x34\0\0\0\x03\0\0\0\xa0\0\0\0\x41\0\0\0\x03\0\0\0\xc0\0\0\0\x4a\0\0\0\x03\0\0\
\0\xe0\0\0\0\x55\0\0\0\x03\0\0\0\0\x01\0\0\x5e\0\0\0\x03\0\0\0\x20\x01\0\0\x6e\
\0\0\0\x03\0\0\0\x40\x01\0\0\x76\0\0\0\x03\0\0\0\x60\x01\0\0\x7f\0\0\0\x05\0\0\
\0\x80\x01\0\0\x82\0\0\0\x03\0\0\0\x20\x02\0\0\x87\0\0\0\x03\0\0\0\x40\x02\0\0\
\x92\0\0\0\x03\0\0\0\x60\x02\0\0\x97\0\0\0\x03\0\0\0\x80\x02\0\0\xa0\0\0\0\x03\
\0\0\0\xa0\x02\0\0\xa8\0\0\0\x03\0\0\0\xc0\x02\0\0\xaf\0\0\0\x03\0\0\0\xe0\x02\
\0\0\xba\0\0\0\x03\0\0\0\0\x03\0\0\xc4\0\0\0\x07\0\0\0\x20\x03\0\0\xcf\0\0\0\
\x07\0\0\0\xa0\x03\0\0\xd9\0\0\0\x03\0\0\0\x20\x04\0\0\xe5\0\0\0\x03\0\0\0\x40\
\x04\0\0\xf0\0\0\0\x03\0\0\0\x60\x04\0\0\0\0\0\0\x08\0\0\0\x80\x04\0\0\xfa\0\0\
\0\x0a\0\0\0\xc0\x04\0\0\x01\x01\0\0\x03\0\0\0\0\x05\0\0\x0a\x01\0\0\x03\0\0\0\
\x20\x05\0\0\0\0\0\0\x0c\0\0\0\x40\x05\0\0\x13\x01\0\0\x03\0\0\0\x80\x05\0\0\
\x1c\x01\0\0\x0e\0\0\0\xa0\x05\0\0\x28\x01\0\0\x0a\0\0\0\xc0\x05\0\0\x31\x01\0\
\0\0\0\0\x08\x04\0\0\0\x37\x01\0\0\0\0\0\x01\x04\0\0\0\x20\0\0\0\0\0\0\0\0\0\0\
\x03\0\0\0\0\x03\0\0\0\x06\0\0\0\x05\0\0\0\x44\x01\0\0\0\0\0\x01\x04\0\0\0\x20\
\0\0\0\0\0\0\0\0\0\0\x03\0\0\0\0\x03\0\0\0\x06\0\0\0\x04\0\0\0\0\0\0\0\x01\0\0\
\x05\x08\0\0\0\x58\x01\0\0\x09\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x02\x21\0\0\0\x62\
\x01\0\0\0\0\0\x08\x0b\0\0\0\x68\x01\0\0\0\0\0\x01\x08\0\0\0\x40\0\0\0\0\0\0\0\
\x01\0\0\x05\x08\0\0\0\x7b\x01\0\0\x0d\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x02\x22\0\0\
\0\x7e\x01\0\0\0\0\0\x08\x0f\0\0\0\x83\x01\0\0\0\0\0\x01\x01\0\0\0\x08\0\0\0\0\
\0\0\0\x01\0\0\x0d\x11\0\0\0\x91\x01\0\0\x01\0\0\0\x95\x01\0\0\0\0\0\x01\x04\0\
\0\0\x20\0\0\x01\x99\x01\0\0\x01\0\0\x0c\x10\0\0\0\xa4\x01\0\0\x0a\0\0\x84\x14\
\0\0\0\xaa\x01\0\0\x0e\0\0\0\0\0\0\x04\xae\x01\0\0\x0e\0\0\0\x04\0\0\x04\xb6\
\x01\0\0\x0e\0\0\0\x08\0\0\0\xba\x01\0\0\x14\0\0\0\x10\0\0\0\xc2\x01\0\0\x14\0\
\0\0\x20\0\0\0\xc5\x01\0\0\x14\0\0\0\x30\0\0\0\xce\x01\0\0\x0e\0\0\0\x40\0\0\0\
\x2b\0\0\0\x0e\0\0\0\x48\0\0\0\xd2\x01\0\0\x17\0\0\0\x50\0\0\0\0\0\0\0\x18\0\0\
\0\x60\0\0\0\xd8\x01\0\0\0\0\0\x08\x15\0\0\0\xdf\x01\0\0\0\0\0\x08\x16\0\0\0\
\xe5\x01\0\0\0\0\0\x01\x02\0\0\0\x10\0\0\0\xf4\x01\0\0\0\0\0\x08\x15\0\0\0\0\0\
\0\0\x02\0\0\x05\x08\0\0\0\0\0\0\0\x19\0\0\0\0\0\0\0\xfc\x01\0\0\x19\0\0\0\0\0\
\0\0\0\0\0\0\x02\0\0\x04\x08\0\0\0\x02\x02\0\0\x1a\0\0\0\0\0\0\0\x08\x02\0\0\
\x1a\0\0\0\x20\0\0\0\x0e\x02\0\0\0\0\0\x08\x03\0\0\0\0\0\0\0\0\0\0\x0a\x1c\0\0\
\0\x15\x02\0\0\0\0\0\x01\x01\0\0\0\x08\0\0\x01\0\0\0\0\0\0\0\x03\0\0\0\0\x1b\0\
\0\0\x06\0\0\0\x24\0\0\0\x1a\x02\0\0\0\0\0\x0e\x1d\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\x03\0\0\0\0\x1c\0\0\0\x06\0\0\0\x04\0\0\0\x2d\x02\0\0\0\0\0\x0e\x1f\0\0\0\x01\
\0\0\0\x37\x02\0\0\0\0\0\x07\0\0\0\0\x45\x02\0\0\0\0\0\x07\0\0\0\0\x98\x03\0\0\
\x01\0\0\x0f\x24\0\0\0\x1e\0\0\0\0\0\0\0\x24\0\0\0\xa0\x03\0\0\x01\0\0\x0f\x04\
\0\0\0\x20\0\0\0\0\0\0\0\x04\0\0\0\0\x5f\x5f\x73\x6b\x5f\x62\x75\x66\x66\0\x6c\
\x65\x6e\0\x70\x6b\x74\x5f\x74\x79\x70\x65\0\x6d\x61\x72\x6b\0\x71\x75\x65\x75\
\x65\x5f\x6d\x61\x70\x70\x69\x6e\x67\0\x70\x72\x6f\x74\x6f\x63\x6f\x6c\0\x76\
\x6c\x61\x6e\x5f\x70\x72\x65\x73\x65\x6e\x74\0\x76\x6c\x61\x6e\x5f\x74\x63\x69\
\0\x76\x6c\x61\x6e\x5f\x70\x72\x6f\x74\x6f\0\x70\x72\x69\x6f\x72\x69\x74\x79\0\
\x69\x6e\x67\x72\x65\x73\x73\x5f\x69\x66\x69\x6e\x64\x65\x78\0\x69\x66\x69\x6e\
\x64\x65\x78\0\x74\x63\x5f\x69\x6e\x64\x65\x78\0\x63\x62\0\x68\x61\x73\x68\0\
\x74\x63\x5f\x63\x6c\x61\x73\x73\x69\x64\0\x64\x61\x74\x61\0\x64\x61\x74\x61\
\x5f\x65\x6e\x64\0\x6e\x61\x70\x69\x5f\x69\x64\0\x66\x61\x6d\x69\x6c\x79\0\x72\
\x65\x6d\x6f\x74\x65\x5f\x69\x70\x34\0\x6c\x6f\x63\x61\x6c\x5f\x69\x70\x34\0\
\x72\x65\x6d\x6f\x74\x65\x5f\x69\x70\x36\0\x6c\x6f\x63\x61\x6c\x5f\x69\x70\x36\
\0\x72\x65\x6d\x6f\x74\x65\x5f\x70\x6f\x72\x74\0\x6c\x6f\x63\x61\x6c\x5f\x70\
\x6f\x72\x74\0\x64\x61\x74\x61\x5f\x6d\x65\x74\x61\0\x74\x73\x74\x61\x6d\x70\0\
\x77\x69\x72\x65\x5f\x6c\x65\x6e\0\x67\x73\x6f\x5f\x73\x65\x67\x73\0\x67\x73\
\x6f\x5f\x73\x69\x7a\x65\0\x74\x73\x74\x61\x6d\x70\x5f\x74\x79\x70\x65\0\x68\
\x77\x74\x73\x74\x61\x6d\x70\0\x5f\x5f\x75\x33\x32\0\x75\x6e\x73\x69\x67\x6e\
\x65\x64\x20\x69\x6e\x74\0\x5f\x5f\x41\x52\x52\x41\x59\x5f\x53\x49\x5a\x45\x5f\
\x54\x59\x50\x45\x5f\x5f\0\x66\x6c\x6f\x77\x5f\x6b\x65\x79\x73\0\x5f\x5f\x75\
\x36\x34\0\x75\x6e\x73\x69\x67\x6e\x65\x64\x20\x6c\x6f\x6e\x67\x20\x6c\x6f\x6e\
\x67\0\x73\x6b\0\x5f\x5f\x75\x38\0\x75\x6e\x73\x69\x67\x6e\x65\x64\x20\x63\x68\
\x61\x72\0\x63\x74\x78\0\x69\x6e\x74\0\x74\x63\x5f\x69\x6e\x67\x72\x65\x73\x73\
\0\x69\x70\x68\x64\x72\0\x69\x68\x6c\0\x76\x65\x72\x73\x69\x6f\x6e\0\x74\x6f\
\x73\0\x74\x6f\x74\x5f\x6c\x65\x6e\0\x69\x64\0\x66\x72\x61\x67\x5f\x6f\x66\x66\
\0\x74\x74\x6c\0\x63\x68\x65\x63\x6b\0\x5f\x5f\x62\x65\x31\x36\0\x5f\x5f\x75\
\x31\x36\0\x75\x6e\x73\x69\x67\x6e\x65\x64\x20\x73\x68\x6f\x72\x74\0\x5f\x5f\
\x73\x75\x6d\x31\x36\0\x61\x64\x64\x72\x73\0\x73\x61\x64\x64\x72\0\x64\x61\x64\
\x64\x72\0\x5f\x5f\x62\x65\x33\x32\0\x63\x68\x61\x72\0\x74\x63\x5f\x69\x6e\x67\
\x72\x65\x73\x73\x2e\x5f\x5f\x5f\x5f\x66\x6d\x74\0\x5f\x5f\x6c\x69\x63\x65\x6e\
\x73\x65\0\x62\x70\x66\x5f\x66\x6c\x6f\x77\x5f\x6b\x65\x79\x73\0\x62\x70\x66\
\x5f\x73\x6f\x63\x6b\0\x2f\x68\x6f\x6d\x65\x2f\x70\x72\x69\x79\x61\x2f\x6c\x69\
\x62\x62\x70\x66\x2d\x62\x6f\x6f\x74\x73\x74\x72\x61\x70\x2f\x65\x78\x61\x6d\
\x70\x6c\x65\x73\x2f\x63\x2f\x74\x63\x5f\x63\x67\x72\x6f\x75\x70\x2e\x62\x70\
\x66\x2e\x63\0\x09\x76\x6f\x69\x64\x20\x2a\x64\x61\x74\x61\x5f\x65\x6e\x64\x20\
\x3d\x20\x28\x76\x6f\x69\x64\x20\x2a\x29\x28\x5f\x5f\x75\x36\x34\x29\x63\x74\
\x78\x2d\x3e\x64\x61\x74\x61\x5f\x65\x6e\x64\x3b\0\x09\x69\x66\x20\x28\x63\x74\
\x78\x2d\x3e\x70\x72\x6f\x74\x6f\x63\x6f\x6c\x20\x21\x3d\x20\x62\x70\x66\x5f\
\x68\x74\x6f\x6e\x73\x28\x45\x54\x48\x5f\x50\x5f\x49\x50\x29\x29\0\x09\x76\x6f\
\x69\x64\x20\x2a\x64\x61\x74\x61\x20\x3d\x20\x28\x76\x6f\x69\x64\x20\x2a\x29\
\x28\x5f\x5f\x75\x36\x34\x29\x63\x74\x78\x2d\x3e\x64\x61\x74\x61\x3b\0\x09\x69\
\x66\x20\x28\x28\x76\x6f\x69\x64\x20\x2a\x29\x28\x6c\x32\x20\x2b\x20\x31\x29\
\x20\x3e\x20\x64\x61\x74\x61\x5f\x65\x6e\x64\x29\0\x09\x62\x70\x66\x5f\x70\x72\
\x69\x6e\x74\x6b\x28\x22\x47\x6f\x74\x20\x49\x50\x20\x70\x61\x63\x6b\x65\x74\
\x3a\x20\x74\x6f\x74\x5f\x6c\x65\x6e\x3a\x20\x25\x64\x2c\x20\x74\x74\x6c\x3a\
\x20\x25\x64\x22\x2c\x20\x62\x70\x66\x5f\x6e\x74\x6f\x68\x73\x28\x6c\x33\x2d\
\x3e\x74\x6f\x74\x5f\x6c\x65\x6e\x29\x2c\x20\x6c\x33\x2d\x3e\x74\x74\x6c\x29\
\x3b\0\x7d\0\x30\x3a\x31\x36\0\x30\x3a\x34\0\x30\x3a\x31\x35\0\x30\x3a\x36\0\
\x30\x3a\x33\0\x2e\x72\x6f\x64\x61\x74\x61\0\x6c\x69\x63\x65\x6e\x73\x65\0\x74\
\x63\0\0\x9f\xeb\x01\0\x20\0\0\0\0\0\0\0\x14\0\0\0\x14\0\0\0\x8c\0\0\0\xa0\0\0\
\0\x5c\0\0\0\x08\0\0\0\xa8\x03\0\0\x01\0\0\0\0\0\0\0\x12\0\0\0\x10\0\0\0\xa8\
\x03\0\0\x08\0\0\0\0\0\0\0\x4e\x02\0\0\x86\x02\0\0\x27\x48\0\0\x08\0\0\0\x4e\
\x02\0\0\xb6\x02\0\0\x0b\x70\0\0\x10\0\0\0\x4e\x02\0\0\xb6\x02\0\0\x06\x70\0\0\
\x18\0\0\0\x4e\x02\0\0\xe1\x02\0\0\x23\x4c\0\0\x20\0\0\0\x4e\x02\0\0\x09\x03\0\
\0\x06\x80\0\0\x30\0\0\0\x4e\x02\0\0\x09\x03\0\0\x06\x80\0\0\x58\0\0\0\x4e\x02\
\0\0\x2b\x03\0\0\x02\x9c\0\0\x90\0\0\0\x4e\x02\0\0\x80\x03\0\0\x01\xa4\0\0\x10\
\0\0\0\xa8\x03\0\0\x05\0\0\0\0\0\0\0\x02\0\0\0\x82\x03\0\0\0\0\0\0\x08\0\0\0\
\x02\0\0\0\x87\x03\0\0\0\0\0\0\x18\0\0\0\x02\0\0\0\x8b\x03\0\0\0\0\0\0\x58\0\0\
\0\x13\0\0\0\x90\x03\0\0\0\0\0\0\x60\0\0\0\x13\0\0\0\x94\x03\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\x03\0\0\0\x20\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x40\0\0\0\0\0\0\0\x78\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x09\0\0\0\x02\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\xb8\0\0\0\0\0\0\0\xc0\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\x08\0\0\0\0\0\
\0\0\x18\0\0\0\0\0\0\0\x11\0\0\0\x01\0\0\0\x06\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\x78\x01\0\0\0\0\0\0\xa0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x08\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\x14\0\0\0\x01\0\0\0\x02\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x18\x02\0\0\0\
\0\0\0\x24\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x1c\
\0\0\0\x01\0\0\0\x03\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x3c\x02\0\0\0\0\0\0\x04\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x63\0\0\0\x09\0\0\
\0\x40\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x40\x02\0\0\0\0\0\0\x10\0\0\0\0\0\0\0\x02\
\0\0\0\x03\0\0\0\x08\0\0\0\0\0\0\0\x10\0\0\0\0\0\0\0\x6a\0\0\0\x01\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\x50\x02\0\0\0\0\0\0\x3f\x08\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\x08\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x6f\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\x90\x0a\0\0\0\0\0\0\x1c\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x08\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0";

	*sz = sizeof(data) - 1;
	return (const void *)data;
}

#ifdef __cplusplus
struct tc_cgroup_bpf *tc_cgroup_bpf::open(const struct bpf_object_open_opts *opts) { return tc_cgroup_bpf__open_opts(opts); }
struct tc_cgroup_bpf *tc_cgroup_bpf::open_and_load() { return tc_cgroup_bpf__open_and_load(); }
int tc_cgroup_bpf::load(struct tc_cgroup_bpf *skel) { return tc_cgroup_bpf__load(skel); }
int tc_cgroup_bpf::attach(struct tc_cgroup_bpf *skel) { return tc_cgroup_bpf__attach(skel); }
void tc_cgroup_bpf::detach(struct tc_cgroup_bpf *skel) { tc_cgroup_bpf__detach(skel); }
void tc_cgroup_bpf::destroy(struct tc_cgroup_bpf *skel) { tc_cgroup_bpf__destroy(skel); }
const void *tc_cgroup_bpf::elf_bytes(size_t *sz) { return tc_cgroup_bpf__elf_bytes(sz); }
#endif /* __cplusplus */

__attribute__((unused)) static void
tc_cgroup_bpf__assert(struct tc_cgroup_bpf *s __attribute__((unused)))
{
#ifdef __cplusplus
#define _Static_assert static_assert
#endif
#ifdef __cplusplus
#undef _Static_assert
#endif
}

#endif /* __TC_CGROUP_BPF_SKEL_H__ */
