/* SPDX-License-Identifier: (LGPL-2.1 OR BSD-2-Clause) */

/* THIS FILE IS AUTOGENERATED BY BPFTOOL! */
#ifndef __TRIE_KPROBE_BPF_SKEL_H__
#define __TRIE_KPROBE_BPF_SKEL_H__

#include <errno.h>
#include <stdlib.h>
#include <bpf/libbpf.h>

struct trie_kprobe_bpf {
	struct bpf_object_skeleton *skeleton;
	struct bpf_object *obj;
	struct {
		struct bpf_map *pb;
		struct bpf_map *rodata;
	} maps;
	struct {
		struct bpf_program *do_unlinkat;
	} progs;
	struct {
		struct bpf_link *do_unlinkat;
	} links;

#ifdef __cplusplus
	static inline struct trie_kprobe_bpf *open(const struct bpf_object_open_opts *opts = nullptr);
	static inline struct trie_kprobe_bpf *open_and_load();
	static inline int load(struct trie_kprobe_bpf *skel);
	static inline int attach(struct trie_kprobe_bpf *skel);
	static inline void detach(struct trie_kprobe_bpf *skel);
	static inline void destroy(struct trie_kprobe_bpf *skel);
	static inline const void *elf_bytes(size_t *sz);
#endif /* __cplusplus */
};

static void
trie_kprobe_bpf__destroy(struct trie_kprobe_bpf *obj)
{
	if (!obj)
		return;
	if (obj->skeleton)
		bpf_object__destroy_skeleton(obj->skeleton);
	free(obj);
}

static inline int
trie_kprobe_bpf__create_skeleton(struct trie_kprobe_bpf *obj);

static inline struct trie_kprobe_bpf *
trie_kprobe_bpf__open_opts(const struct bpf_object_open_opts *opts)
{
	struct trie_kprobe_bpf *obj;
	int err;

	obj = (struct trie_kprobe_bpf *)calloc(1, sizeof(*obj));
	if (!obj) {
		errno = ENOMEM;
		return NULL;
	}

	err = trie_kprobe_bpf__create_skeleton(obj);
	if (err)
		goto err_out;

	err = bpf_object__open_skeleton(obj->skeleton, opts);
	if (err)
		goto err_out;

	return obj;
err_out:
	trie_kprobe_bpf__destroy(obj);
	errno = -err;
	return NULL;
}

static inline struct trie_kprobe_bpf *
trie_kprobe_bpf__open(void)
{
	return trie_kprobe_bpf__open_opts(NULL);
}

static inline int
trie_kprobe_bpf__load(struct trie_kprobe_bpf *obj)
{
	return bpf_object__load_skeleton(obj->skeleton);
}

static inline struct trie_kprobe_bpf *
trie_kprobe_bpf__open_and_load(void)
{
	struct trie_kprobe_bpf *obj;
	int err;

	obj = trie_kprobe_bpf__open();
	if (!obj)
		return NULL;
	err = trie_kprobe_bpf__load(obj);
	if (err) {
		trie_kprobe_bpf__destroy(obj);
		errno = -err;
		return NULL;
	}
	return obj;
}

static inline int
trie_kprobe_bpf__attach(struct trie_kprobe_bpf *obj)
{
	return bpf_object__attach_skeleton(obj->skeleton);
}

static inline void
trie_kprobe_bpf__detach(struct trie_kprobe_bpf *obj)
{
	bpf_object__detach_skeleton(obj->skeleton);
}

static inline const void *trie_kprobe_bpf__elf_bytes(size_t *sz);

static inline int
trie_kprobe_bpf__create_skeleton(struct trie_kprobe_bpf *obj)
{
	struct bpf_object_skeleton *s;
	int err;

	s = (struct bpf_object_skeleton *)calloc(1, sizeof(*s));
	if (!s)	{
		err = -ENOMEM;
		goto err;
	}

	s->sz = sizeof(*s);
	s->name = "trie_kprobe_bpf";
	s->obj = &obj->obj;

	/* maps */
	s->map_cnt = 2;
	s->map_skel_sz = sizeof(*s->maps);
	s->maps = (struct bpf_map_skeleton *)calloc(s->map_cnt, s->map_skel_sz);
	if (!s->maps) {
		err = -ENOMEM;
		goto err;
	}

	s->maps[0].name = "pb";
	s->maps[0].map = &obj->maps.pb;

	s->maps[1].name = "trie_kpr.rodata";
	s->maps[1].map = &obj->maps.rodata;

	/* programs */
	s->prog_cnt = 1;
	s->prog_skel_sz = sizeof(*s->progs);
	s->progs = (struct bpf_prog_skeleton *)calloc(s->prog_cnt, s->prog_skel_sz);
	if (!s->progs) {
		err = -ENOMEM;
		goto err;
	}

	s->progs[0].name = "do_unlinkat";
	s->progs[0].prog = &obj->progs.do_unlinkat;
	s->progs[0].link = &obj->links.do_unlinkat;

	s->data = trie_kprobe_bpf__elf_bytes(&s->data_sz);

	obj->skeleton = s;
	return 0;
err:
	bpf_object__destroy_skeleton(s);
	return err;
}

static inline const void *trie_kprobe_bpf__elf_bytes(size_t *sz)
{
	static const char data[] __attribute__((__aligned__(8))) = "\
\x7f\x45\x4c\x46\x02\x01\x01\0\0\0\0\0\0\0\0\0\x01\0\xf7\0\x01\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\x48\x12\0\0\0\0\0\0\0\0\0\0\x40\0\0\0\0\0\x40\0\x0a\0\
\x01\0\0\x2e\x73\x74\x72\x74\x61\x62\0\x2e\x73\x79\x6d\x74\x61\x62\0\x6b\x73\
\x79\x73\x63\x61\x6c\x6c\x2f\x63\x6c\x6f\x6e\x65\0\x6c\x69\x63\x65\x6e\x73\x65\
\0\x2e\x6d\x61\x70\x73\0\x2e\x72\x6f\x64\x61\x74\x61\0\x74\x72\x69\x65\x5f\x6b\
\x70\x72\x6f\x62\x65\x2e\x62\x70\x66\x2e\x63\0\x4c\x42\x42\x30\x5f\x32\0\x4c\
\x42\x42\x30\x5f\x34\0\x4c\x42\x42\x30\x5f\x36\0\x4c\x42\x42\x30\x5f\x38\0\x4c\
\x42\x42\x30\x5f\x31\x30\0\x4c\x42\x42\x30\x5f\x31\x32\0\x4c\x42\x42\x30\x5f\
\x31\x34\0\x4c\x42\x42\x30\x5f\x31\x36\0\x4c\x42\x42\x30\x5f\x31\x38\0\x4c\x42\
\x42\x30\x5f\x32\x30\0\x5f\x5f\x5f\x5f\x64\x6f\x5f\x75\x6e\x6c\x69\x6e\x6b\x61\
\x74\x2e\x5f\x5f\x5f\x5f\x66\x6d\x74\0\x64\x6f\x5f\x75\x6e\x6c\x69\x6e\x6b\x61\
\x74\0\x70\x62\0\x4c\x49\x43\x45\x4e\x53\x45\0\x5f\x6c\x69\x63\x65\x6e\x73\x65\
\0\x2e\x72\x65\x6c\x6b\x73\x79\x73\x63\x61\x6c\x6c\x2f\x63\x6c\x6f\x6e\x65\0\
\x2e\x42\x54\x46\0\x2e\x42\x54\x46\x2e\x65\x78\x74\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x36\0\0\0\x04\0\xf1\xff\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\x03\0\x03\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x48\0\0\0\0\0\x03\0\
\xc0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x4f\0\0\0\0\0\x03\0\x18\x01\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\x56\0\0\0\0\0\x03\0\x70\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x5d\0\0\0\
\0\0\x03\0\xc8\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x64\0\0\0\0\0\x03\0\x20\x02\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\x6c\0\0\0\0\0\x03\0\x78\x02\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\x74\0\0\0\0\0\x03\0\xd0\x02\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x7c\0\0\0\0\0\x03\0\
\x28\x03\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x84\0\0\0\0\0\x03\0\x80\x03\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\x8c\0\0\0\0\0\x03\0\xd8\x03\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x94\0\0\
\0\x01\0\x06\0\0\0\0\0\0\0\0\0\x22\0\0\0\0\0\0\0\0\0\0\0\x03\0\x06\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\xac\0\0\0\x12\0\x03\0\0\0\0\0\0\0\0\0\x08\x04\0\0\0\0\0\
\0\xb8\0\0\0\x11\0\x05\0\0\0\0\0\0\0\0\0\x28\0\0\0\0\0\0\0\xbb\0\0\0\x11\0\x04\
\0\0\0\0\0\0\0\0\0\x0d\0\0\0\0\0\0\0\xc3\0\0\0\x11\0\x04\0\x0d\0\0\0\0\0\0\0\
\x04\0\0\0\0\0\0\0\x18\x01\0\0\x01\0\0\0\0\0\0\0\x02\0\0\0\x7b\x1a\xf8\xff\0\0\
\0\0\xb7\x01\0\0\x01\0\0\0\x7b\x1a\xf0\xff\0\0\0\0\xbf\xa6\0\0\0\0\0\0\x07\x06\
\0\0\xf8\xff\xff\xff\xbf\xa3\0\0\0\0\0\0\x07\x03\0\0\xf0\xff\xff\xff\x18\x01\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\xbf\x62\0\0\0\0\0\0\xb7\x04\0\0\0\0\0\0\x85\0\0\0\
\x02\0\0\0\x18\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xbf\x62\0\0\0\0\0\0\x85\0\0\0\
\x01\0\0\0\x15\0\x05\0\0\0\0\0\xbf\xa2\0\0\0\0\0\0\x07\x02\0\0\xf8\xff\xff\xff\
\x18\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x85\0\0\0\x03\0\0\0\xbf\xa2\0\0\0\0\0\0\
\x07\x02\0\0\xf8\xff\xff\xff\x18\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x85\0\0\0\x01\
\0\0\0\x15\0\x05\0\0\0\0\0\xbf\xa2\0\0\0\0\0\0\x07\x02\0\0\xf8\xff\xff\xff\x18\
\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x85\0\0\0\x03\0\0\0\xbf\xa2\0\0\0\0\0\0\x07\
\x02\0\0\xf8\xff\xff\xff\x18\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x85\0\0\0\x01\0\0\
\0\x15\0\x05\0\0\0\0\0\xbf\xa2\0\0\0\0\0\0\x07\x02\0\0\xf8\xff\xff\xff\x18\x01\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x85\0\0\0\x03\0\0\0\xbf\xa2\0\0\0\0\0\0\x07\x02\0\
\0\xf8\xff\xff\xff\x18\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x85\0\0\0\x01\0\0\0\x15\
\0\x05\0\0\0\0\0\xbf\xa2\0\0\0\0\0\0\x07\x02\0\0\xf8\xff\xff\xff\x18\x01\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\x85\0\0\0\x03\0\0\0\xbf\xa2\0\0\0\0\0\0\x07\x02\0\0\xf8\
\xff\xff\xff\x18\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x85\0\0\0\x01\0\0\0\x15\0\x05\
\0\0\0\0\0\xbf\xa2\0\0\0\0\0\0\x07\x02\0\0\xf8\xff\xff\xff\x18\x01\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\x85\0\0\0\x03\0\0\0\xbf\xa2\0\0\0\0\0\0\x07\x02\0\0\xf8\xff\
\xff\xff\x18\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x85\0\0\0\x01\0\0\0\x15\0\x05\0\0\
\0\0\0\xbf\xa2\0\0\0\0\0\0\x07\x02\0\0\xf8\xff\xff\xff\x18\x01\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\x85\0\0\0\x03\0\0\0\xbf\xa2\0\0\0\0\0\0\x07\x02\0\0\xf8\xff\xff\
\xff\x18\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x85\0\0\0\x01\0\0\0\x15\0\x05\0\0\0\0\
\0\xbf\xa2\0\0\0\0\0\0\x07\x02\0\0\xf8\xff\xff\xff\x18\x01\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\x85\0\0\0\x03\0\0\0\xbf\xa2\0\0\0\0\0\0\x07\x02\0\0\xf8\xff\xff\xff\
\x18\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x85\0\0\0\x01\0\0\0\x15\0\x05\0\0\0\0\0\
\xbf\xa2\0\0\0\0\0\0\x07\x02\0\0\xf8\xff\xff\xff\x18\x01\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\x85\0\0\0\x03\0\0\0\xbf\xa2\0\0\0\0\0\0\x07\x02\0\0\xf8\xff\xff\xff\x18\
\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x85\0\0\0\x01\0\0\0\x15\0\x05\0\0\0\0\0\xbf\
\xa2\0\0\0\0\0\0\x07\x02\0\0\xf8\xff\xff\xff\x18\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\x85\0\0\0\x03\0\0\0\xbf\xa2\0\0\0\0\0\0\x07\x02\0\0\xf8\xff\xff\xff\x18\x01\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x85\0\0\0\x01\0\0\0\x15\0\x05\0\0\0\0\0\xbf\xa2\0\
\0\0\0\0\0\x07\x02\0\0\xf8\xff\xff\xff\x18\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x85\
\0\0\0\x03\0\0\0\x18\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xb7\x02\0\0\x22\0\0\0\x85\
\0\0\0\x06\0\0\0\xb7\0\0\0\0\0\0\0\x95\0\0\0\0\0\0\0\x44\x75\x61\x6c\x20\x42\
\x53\x44\x2f\x47\x50\x4c\0\x47\x50\x4c\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x42\x50\x46\x20\x74\
\x72\x69\x67\x67\x65\x72\x65\x64\x20\x69\x6e\x20\x70\x72\x6f\x63\x65\x73\x73\
\x20\x63\x6f\x6e\x74\x65\x78\x74\x2e\0\0\0\0\0\0\0\x48\0\0\0\0\0\0\0\x01\0\0\0\
\x10\0\0\0\x70\0\0\0\0\0\0\0\x01\0\0\0\x10\0\0\0\xa8\0\0\0\0\0\0\0\x01\0\0\0\
\x10\0\0\0\xd0\0\0\0\0\0\0\0\x01\0\0\0\x10\0\0\0\0\x01\0\0\0\0\0\0\x01\0\0\0\
\x10\0\0\0\x28\x01\0\0\0\0\0\0\x01\0\0\0\x10\0\0\0\x58\x01\0\0\0\0\0\0\x01\0\0\
\0\x10\0\0\0\x80\x01\0\0\0\0\0\0\x01\0\0\0\x10\0\0\0\xb0\x01\0\0\0\0\0\0\x01\0\
\0\0\x10\0\0\0\xd8\x01\0\0\0\0\0\0\x01\0\0\0\x10\0\0\0\x08\x02\0\0\0\0\0\0\x01\
\0\0\0\x10\0\0\0\x30\x02\0\0\0\0\0\0\x01\0\0\0\x10\0\0\0\x60\x02\0\0\0\0\0\0\
\x01\0\0\0\x10\0\0\0\x88\x02\0\0\0\0\0\0\x01\0\0\0\x10\0\0\0\xb8\x02\0\0\0\0\0\
\0\x01\0\0\0\x10\0\0\0\xe0\x02\0\0\0\0\0\0\x01\0\0\0\x10\0\0\0\x10\x03\0\0\0\0\
\0\0\x01\0\0\0\x10\0\0\0\x38\x03\0\0\0\0\0\0\x01\0\0\0\x10\0\0\0\x68\x03\0\0\0\
\0\0\0\x01\0\0\0\x10\0\0\0\x90\x03\0\0\0\0\0\0\x01\0\0\0\x10\0\0\0\xc0\x03\0\0\
\0\0\0\0\x01\0\0\0\x10\0\0\0\xd8\x03\0\0\0\0\0\0\x01\0\0\0\x0e\0\0\0\x9f\xeb\
\x01\0\x18\0\0\0\0\0\0\0\x68\x03\0\0\x68\x03\0\0\xde\x02\0\0\0\0\0\0\0\0\0\x02\
\x03\0\0\0\x01\0\0\0\0\0\0\x01\x04\0\0\0\x20\0\0\x01\0\0\0\0\0\0\0\x03\0\0\0\0\
\x02\0\0\0\x04\0\0\0\x0b\0\0\0\x05\0\0\0\0\0\0\x01\x04\0\0\0\x20\0\0\0\0\0\0\0\
\0\0\0\x02\x06\0\0\0\x19\0\0\0\x02\0\0\x04\x08\0\0\0\x26\0\0\0\x07\0\0\0\0\0\0\
\0\x30\0\0\0\x07\0\0\0\x20\0\0\0\x35\0\0\0\0\0\0\x08\x08\0\0\0\x3b\0\0\0\0\0\0\
\x01\x04\0\0\0\x20\0\0\0\0\0\0\0\0\0\0\x02\x07\0\0\0\0\0\0\0\0\0\0\x02\x0b\0\0\
\0\0\0\0\0\0\0\0\x03\0\0\0\0\x02\0\0\0\x04\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\x02\
\x0d\0\0\0\0\0\0\0\0\0\0\x03\0\0\0\0\x02\0\0\0\x04\0\0\0\xff\0\0\0\0\0\0\0\x05\
\0\0\x04\x28\0\0\0\x48\0\0\0\x01\0\0\0\0\0\0\0\x4d\0\0\0\x05\0\0\0\x40\0\0\0\
\x51\0\0\0\x09\0\0\0\x80\0\0\0\x57\0\0\0\x0a\0\0\0\xc0\0\0\0\x61\0\0\0\x0c\0\0\
\0\0\x01\0\0\x6d\0\0\0\0\0\0\x0e\x0e\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\x02\x11\0\0\
\0\x70\0\0\0\x15\0\0\x04\xa8\0\0\0\x78\0\0\0\x12\0\0\0\0\0\0\0\x7c\0\0\0\x12\0\
\0\0\x40\0\0\0\x80\0\0\0\x12\0\0\0\x80\0\0\0\x84\0\0\0\x12\0\0\0\xc0\0\0\0\x88\
\0\0\0\x12\0\0\0\0\x01\0\0\x8b\0\0\0\x12\0\0\0\x40\x01\0\0\x8e\0\0\0\x12\0\0\0\
\x80\x01\0\0\x92\0\0\0\x12\0\0\0\xc0\x01\0\0\x96\0\0\0\x12\0\0\0\0\x02\0\0\x99\
\0\0\0\x12\0\0\0\x40\x02\0\0\x9c\0\0\0\x12\0\0\0\x80\x02\0\0\x9f\0\0\0\x12\0\0\
\0\xc0\x02\0\0\xa2\0\0\0\x12\0\0\0\0\x03\0\0\xa5\0\0\0\x12\0\0\0\x40\x03\0\0\
\xa8\0\0\0\x12\0\0\0\x80\x03\0\0\xab\0\0\0\x12\0\0\0\xc0\x03\0\0\xb3\0\0\0\x12\
\0\0\0\0\x04\0\0\xb6\0\0\0\x12\0\0\0\x40\x04\0\0\xb9\0\0\0\x12\0\0\0\x80\x04\0\
\0\xbf\0\0\0\x12\0\0\0\xc0\x04\0\0\xc2\0\0\0\x12\0\0\0\0\x05\0\0\xc5\0\0\0\0\0\
\0\x01\x08\0\0\0\x40\0\0\0\0\0\0\0\x01\0\0\x0d\x02\0\0\0\xd3\0\0\0\x10\0\0\0\
\xd7\0\0\0\x01\0\0\x0c\x13\0\0\0\xe3\0\0\0\0\0\0\x01\x01\0\0\0\x08\0\0\x01\0\0\
\0\0\0\0\0\x03\0\0\0\0\x15\0\0\0\x04\0\0\0\x0d\0\0\0\xe8\0\0\0\0\0\0\x0e\x16\0\
\0\0\x01\0\0\0\0\0\0\0\0\0\0\x03\0\0\0\0\x15\0\0\0\x04\0\0\0\x04\0\0\0\xf0\0\0\
\0\0\0\0\x0e\x18\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\x0a\x15\0\0\0\0\0\0\0\0\0\0\x03\
\0\0\0\0\x1a\0\0\0\x04\0\0\0\x22\0\0\0\xf9\0\0\0\0\0\0\x0e\x1b\0\0\0\0\0\0\0\
\xb9\x02\0\0\x02\0\0\x0f\x11\0\0\0\x17\0\0\0\0\0\0\0\x0d\0\0\0\x19\0\0\0\x0d\0\
\0\0\x04\0\0\0\xc1\x02\0\0\x01\0\0\x0f\x28\0\0\0\x0f\0\0\0\0\0\0\0\x28\0\0\0\
\xc7\x02\0\0\x01\0\0\x0f\x22\0\0\0\x1c\0\0\0\0\0\0\0\x22\0\0\0\0\x69\x6e\x74\0\
\x5f\x5f\x41\x52\x52\x41\x59\x5f\x53\x49\x5a\x45\x5f\x54\x59\x50\x45\x5f\x5f\0\
\x69\x70\x76\x34\x5f\x6c\x70\x6d\x5f\x6b\x65\x79\0\x70\x72\x65\x66\x69\x78\x6c\
\x65\x6e\0\x64\x61\x74\x61\0\x5f\x5f\x75\x33\x32\0\x75\x6e\x73\x69\x67\x6e\x65\
\x64\x20\x69\x6e\x74\0\x74\x79\x70\x65\0\x6b\x65\x79\0\x76\x61\x6c\x75\x65\0\
\x6d\x61\x70\x5f\x66\x6c\x61\x67\x73\0\x6d\x61\x78\x5f\x65\x6e\x74\x72\x69\x65\
\x73\0\x70\x62\0\x70\x74\x5f\x72\x65\x67\x73\0\x72\x31\x35\0\x72\x31\x34\0\x72\
\x31\x33\0\x72\x31\x32\0\x62\x70\0\x62\x78\0\x72\x31\x31\0\x72\x31\x30\0\x72\
\x39\0\x72\x38\0\x61\x78\0\x63\x78\0\x64\x78\0\x73\x69\0\x64\x69\0\x6f\x72\x69\
\x67\x5f\x61\x78\0\x69\x70\0\x63\x73\0\x66\x6c\x61\x67\x73\0\x73\x70\0\x73\x73\
\0\x75\x6e\x73\x69\x67\x6e\x65\x64\x20\x6c\x6f\x6e\x67\0\x63\x74\x78\0\x64\x6f\
\x5f\x75\x6e\x6c\x69\x6e\x6b\x61\x74\0\x63\x68\x61\x72\0\x4c\x49\x43\x45\x4e\
\x53\x45\0\x5f\x6c\x69\x63\x65\x6e\x73\x65\0\x5f\x5f\x5f\x5f\x64\x6f\x5f\x75\
\x6e\x6c\x69\x6e\x6b\x61\x74\x2e\x5f\x5f\x5f\x5f\x66\x6d\x74\0\x2f\x68\x6f\x6d\
\x65\x2f\x70\x72\x69\x79\x61\x2f\x6c\x69\x62\x62\x70\x66\x2d\x62\x6f\x6f\x74\
\x73\x74\x72\x61\x70\x2f\x65\x78\x61\x6d\x70\x6c\x65\x73\x2f\x63\x2f\x74\x72\
\x69\x65\x5f\x6b\x70\x72\x6f\x62\x65\x2e\x62\x70\x66\x2e\x63\0\x69\x6e\x74\x20\
\x42\x50\x46\x5f\x4b\x50\x52\x4f\x42\x45\x28\x64\x6f\x5f\x75\x6e\x6c\x69\x6e\
\x6b\x61\x74\x2c\x20\x69\x6e\x74\x20\x64\x66\x64\x2c\x20\x73\x74\x72\x75\x63\
\x74\x20\x66\x69\x6c\x65\x6e\x61\x6d\x65\x20\x2a\x6e\x61\x6d\x65\x29\0\x20\x20\
\x20\x20\x20\x20\x20\x20\x73\x74\x72\x75\x63\x74\x20\x69\x70\x76\x34\x5f\x6c\
\x70\x6d\x5f\x6b\x65\x79\x20\x6b\x65\x79\x20\x3d\x20\x7b\x20\x31\x2c\x20\x32\
\x7d\x3b\0\x20\x20\x20\x20\x20\x20\x20\x20\x6c\x6f\x6e\x67\x20\x69\x6e\x69\x74\
\x5f\x76\x61\x6c\x20\x3d\x20\x31\x3b\0\x20\x20\x20\x20\x20\x20\x20\x20\x62\x70\
\x66\x5f\x6d\x61\x70\x5f\x75\x70\x64\x61\x74\x65\x5f\x65\x6c\x65\x6d\x28\x26\
\x70\x62\x2c\x20\x26\x6b\x65\x79\x2c\x20\x26\x69\x6e\x69\x74\x5f\x76\x61\x6c\
\x2c\x20\x42\x50\x46\x5f\x41\x4e\x59\x29\x3b\0\x20\x20\x20\x20\x20\x20\x20\x20\
\x20\x20\x20\x20\x20\x20\x20\x20\x76\x61\x6c\x75\x65\x20\x3d\x20\x62\x70\x66\
\x5f\x6d\x61\x70\x5f\x6c\x6f\x6f\x6b\x75\x70\x5f\x65\x6c\x65\x6d\x28\x26\x70\
\x62\x2c\x20\x26\x6b\x65\x79\x29\x3b\0\x09\x09\x69\x66\x20\x28\x76\x61\x6c\x75\
\x65\x29\0\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\
\x20\x20\x20\x20\x20\x20\x20\x62\x70\x66\x5f\x6d\x61\x70\x5f\x64\x65\x6c\x65\
\x74\x65\x5f\x65\x6c\x65\x6d\x28\x26\x70\x62\x2c\x20\x26\x6b\x65\x79\x29\x3b\0\
\x09\x20\x62\x70\x66\x5f\x70\x72\x69\x6e\x74\x6b\x28\x22\x42\x50\x46\x20\x74\
\x72\x69\x67\x67\x65\x72\x65\x64\x20\x69\x6e\x20\x70\x72\x6f\x63\x65\x73\x73\
\x20\x63\x6f\x6e\x74\x65\x78\x74\x2e\x22\x29\x3b\0\x6c\x69\x63\x65\x6e\x73\x65\
\0\x2e\x6d\x61\x70\x73\0\x2e\x72\x6f\x64\x61\x74\x61\0\x6b\x73\x79\x73\x63\x61\
\x6c\x6c\x2f\x63\x6c\x6f\x6e\x65\0\0\0\x9f\xeb\x01\0\x20\0\0\0\0\0\0\0\x14\0\0\
\0\x14\0\0\0\xec\x02\0\0\0\x03\0\0\0\0\0\0\x08\0\0\0\xcf\x02\0\0\x01\0\0\0\0\0\
\0\0\x14\0\0\0\x10\0\0\0\xcf\x02\0\0\x2e\0\0\0\0\0\0\0\x11\x01\0\0\x4b\x01\0\0\
\0\x6c\0\0\x10\0\0\0\x11\x01\0\0\x87\x01\0\0\x1d\x78\0\0\x20\0\0\0\x11\x01\0\0\
\xb2\x01\0\0\x0e\x7c\0\0\x30\0\0\0\x11\x01\0\0\0\0\0\0\0\0\0\0\x48\0\0\0\x11\
\x01\0\0\xcd\x01\0\0\x09\x8c\0\0\x70\0\0\0\x11\x01\0\0\x09\x02\0\0\x19\x98\0\0\
\x90\0\0\0\x11\x01\0\0\x41\x02\0\0\x07\x9c\0\0\xa0\0\0\0\x11\x01\0\0\x4e\x02\0\
\0\x19\xa0\0\0\xc8\0\0\0\x11\x01\0\0\0\0\0\0\0\0\0\0\xd0\0\0\0\x11\x01\0\0\x09\
\x02\0\0\x19\x98\0\0\xe8\0\0\0\x11\x01\0\0\x41\x02\0\0\x07\x9c\0\0\xf8\0\0\0\
\x11\x01\0\0\x4e\x02\0\0\x19\xa0\0\0\x20\x01\0\0\x11\x01\0\0\0\0\0\0\0\0\0\0\
\x28\x01\0\0\x11\x01\0\0\x09\x02\0\0\x19\x98\0\0\x40\x01\0\0\x11\x01\0\0\x41\
\x02\0\0\x07\x9c\0\0\x50\x01\0\0\x11\x01\0\0\x4e\x02\0\0\x19\xa0\0\0\x78\x01\0\
\0\x11\x01\0\0\0\0\0\0\0\0\0\0\x80\x01\0\0\x11\x01\0\0\x09\x02\0\0\x19\x98\0\0\
\x98\x01\0\0\x11\x01\0\0\x41\x02\0\0\x07\x9c\0\0\xa8\x01\0\0\x11\x01\0\0\x4e\
\x02\0\0\x19\xa0\0\0\xd0\x01\0\0\x11\x01\0\0\0\0\0\0\0\0\0\0\xd8\x01\0\0\x11\
\x01\0\0\x09\x02\0\0\x19\x98\0\0\xf0\x01\0\0\x11\x01\0\0\x41\x02\0\0\x07\x9c\0\
\0\0\x02\0\0\x11\x01\0\0\x4e\x02\0\0\x19\xa0\0\0\x28\x02\0\0\x11\x01\0\0\0\0\0\
\0\0\0\0\0\x30\x02\0\0\x11\x01\0\0\x09\x02\0\0\x19\x98\0\0\x48\x02\0\0\x11\x01\
\0\0\x41\x02\0\0\x07\x9c\0\0\x58\x02\0\0\x11\x01\0\0\x4e\x02\0\0\x19\xa0\0\0\
\x80\x02\0\0\x11\x01\0\0\0\0\0\0\0\0\0\0\x88\x02\0\0\x11\x01\0\0\x09\x02\0\0\
\x19\x98\0\0\xa0\x02\0\0\x11\x01\0\0\x41\x02\0\0\x07\x9c\0\0\xb0\x02\0\0\x11\
\x01\0\0\x4e\x02\0\0\x19\xa0\0\0\xd8\x02\0\0\x11\x01\0\0\0\0\0\0\0\0\0\0\xe0\
\x02\0\0\x11\x01\0\0\x09\x02\0\0\x19\x98\0\0\xf8\x02\0\0\x11\x01\0\0\x41\x02\0\
\0\x07\x9c\0\0\x08\x03\0\0\x11\x01\0\0\x4e\x02\0\0\x19\xa0\0\0\x30\x03\0\0\x11\
\x01\0\0\0\0\0\0\0\0\0\0\x38\x03\0\0\x11\x01\0\0\x09\x02\0\0\x19\x98\0\0\x50\
\x03\0\0\x11\x01\0\0\x41\x02\0\0\x07\x9c\0\0\x60\x03\0\0\x11\x01\0\0\x4e\x02\0\
\0\x19\xa0\0\0\x88\x03\0\0\x11\x01\0\0\0\0\0\0\0\0\0\0\x90\x03\0\0\x11\x01\0\0\
\x09\x02\0\0\x19\x98\0\0\xa8\x03\0\0\x11\x01\0\0\x41\x02\0\0\x07\x9c\0\0\xb8\
\x03\0\0\x11\x01\0\0\x4e\x02\0\0\x19\xa0\0\0\xd8\x03\0\0\x11\x01\0\0\x86\x02\0\
\0\x03\xac\0\0\xf8\x03\0\0\x11\x01\0\0\x4b\x01\0\0\x05\x6c\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\x03\0\0\0\x20\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\x40\0\0\0\0\0\0\0\xed\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\x09\0\0\0\x02\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x30\x01\
\0\0\0\0\0\0\xc8\x01\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\x08\0\0\0\0\0\0\0\x18\0\0\0\
\0\0\0\0\x11\0\0\0\x01\0\0\0\x06\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xf8\x02\0\0\0\0\
\0\0\x08\x04\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x08\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x20\
\0\0\0\x01\0\0\0\x03\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x07\0\0\0\0\0\0\x11\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x28\0\0\0\x01\0\0\0\
\x03\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x18\x07\0\0\0\0\0\0\x28\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\x08\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x2e\0\0\0\x01\0\0\0\x02\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\x40\x07\0\0\0\0\0\0\x22\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xcc\0\0\0\x09\0\0\0\x40\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\x68\x07\0\0\0\0\0\0\x60\x01\0\0\0\0\0\0\x02\0\0\0\x03\0\0\0\x08\0\0\0\0\
\0\0\0\x10\0\0\0\0\0\0\0\xdf\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\xc8\x08\0\0\0\0\0\0\x5e\x06\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x08\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\xe4\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x28\x0f\0\0\0\
\0\0\0\x20\x03\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x08\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0";

	*sz = sizeof(data) - 1;
	return (const void *)data;
}

#ifdef __cplusplus
struct trie_kprobe_bpf *trie_kprobe_bpf::open(const struct bpf_object_open_opts *opts) { return trie_kprobe_bpf__open_opts(opts); }
struct trie_kprobe_bpf *trie_kprobe_bpf::open_and_load() { return trie_kprobe_bpf__open_and_load(); }
int trie_kprobe_bpf::load(struct trie_kprobe_bpf *skel) { return trie_kprobe_bpf__load(skel); }
int trie_kprobe_bpf::attach(struct trie_kprobe_bpf *skel) { return trie_kprobe_bpf__attach(skel); }
void trie_kprobe_bpf::detach(struct trie_kprobe_bpf *skel) { trie_kprobe_bpf__detach(skel); }
void trie_kprobe_bpf::destroy(struct trie_kprobe_bpf *skel) { trie_kprobe_bpf__destroy(skel); }
const void *trie_kprobe_bpf::elf_bytes(size_t *sz) { return trie_kprobe_bpf__elf_bytes(sz); }
#endif /* __cplusplus */

__attribute__((unused)) static void
trie_kprobe_bpf__assert(struct trie_kprobe_bpf *s __attribute__((unused)))
{
#ifdef __cplusplus
#define _Static_assert static_assert
#endif
#ifdef __cplusplus
#undef _Static_assert
#endif
}

#endif /* __TRIE_KPROBE_BPF_SKEL_H__ */
