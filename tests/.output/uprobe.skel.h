/* SPDX-License-Identifier: (LGPL-2.1 OR BSD-2-Clause) */

/* THIS FILE IS AUTOGENERATED BY BPFTOOL! */
#ifndef __UPROBE_BPF_SKEL_H__
#define __UPROBE_BPF_SKEL_H__

#include <errno.h>
#include <stdlib.h>
#include <bpf/libbpf.h>

struct uprobe_bpf {
	struct bpf_object_skeleton *skeleton;
	struct bpf_object *obj;
	struct {
		struct bpf_map *rodata;
	} maps;
	struct {
		struct bpf_program *uprobe_add;
		struct bpf_program *uretprobe_add;
		struct bpf_program *uprobe_sub;
		struct bpf_program *uretprobe_sub;
	} progs;
	struct {
		struct bpf_link *uprobe_add;
		struct bpf_link *uretprobe_add;
		struct bpf_link *uprobe_sub;
		struct bpf_link *uretprobe_sub;
	} links;

#ifdef __cplusplus
	static inline struct uprobe_bpf *open(const struct bpf_object_open_opts *opts = nullptr);
	static inline struct uprobe_bpf *open_and_load();
	static inline int load(struct uprobe_bpf *skel);
	static inline int attach(struct uprobe_bpf *skel);
	static inline void detach(struct uprobe_bpf *skel);
	static inline void destroy(struct uprobe_bpf *skel);
	static inline const void *elf_bytes(size_t *sz);
#endif /* __cplusplus */
};

static void
uprobe_bpf__destroy(struct uprobe_bpf *obj)
{
	if (!obj)
		return;
	if (obj->skeleton)
		bpf_object__destroy_skeleton(obj->skeleton);
	free(obj);
}

static inline int
uprobe_bpf__create_skeleton(struct uprobe_bpf *obj);

static inline struct uprobe_bpf *
uprobe_bpf__open_opts(const struct bpf_object_open_opts *opts)
{
	struct uprobe_bpf *obj;
	int err;

	obj = (struct uprobe_bpf *)calloc(1, sizeof(*obj));
	if (!obj) {
		errno = ENOMEM;
		return NULL;
	}

	err = uprobe_bpf__create_skeleton(obj);
	if (err)
		goto err_out;

	err = bpf_object__open_skeleton(obj->skeleton, opts);
	if (err)
		goto err_out;

	return obj;
err_out:
	uprobe_bpf__destroy(obj);
	errno = -err;
	return NULL;
}

static inline struct uprobe_bpf *
uprobe_bpf__open(void)
{
	return uprobe_bpf__open_opts(NULL);
}

static inline int
uprobe_bpf__load(struct uprobe_bpf *obj)
{
	return bpf_object__load_skeleton(obj->skeleton);
}

static inline struct uprobe_bpf *
uprobe_bpf__open_and_load(void)
{
	struct uprobe_bpf *obj;
	int err;

	obj = uprobe_bpf__open();
	if (!obj)
		return NULL;
	err = uprobe_bpf__load(obj);
	if (err) {
		uprobe_bpf__destroy(obj);
		errno = -err;
		return NULL;
	}
	return obj;
}

static inline int
uprobe_bpf__attach(struct uprobe_bpf *obj)
{
	return bpf_object__attach_skeleton(obj->skeleton);
}

static inline void
uprobe_bpf__detach(struct uprobe_bpf *obj)
{
	bpf_object__detach_skeleton(obj->skeleton);
}

static inline const void *uprobe_bpf__elf_bytes(size_t *sz);

static inline int
uprobe_bpf__create_skeleton(struct uprobe_bpf *obj)
{
	struct bpf_object_skeleton *s;
	int err;

	s = (struct bpf_object_skeleton *)calloc(1, sizeof(*s));
	if (!s)	{
		err = -ENOMEM;
		goto err;
	}

	s->sz = sizeof(*s);
	s->name = "uprobe_bpf";
	s->obj = &obj->obj;

	/* maps */
	s->map_cnt = 1;
	s->map_skel_sz = sizeof(*s->maps);
	s->maps = (struct bpf_map_skeleton *)calloc(s->map_cnt, s->map_skel_sz);
	if (!s->maps) {
		err = -ENOMEM;
		goto err;
	}

	s->maps[0].name = "uprobe_b.rodata";
	s->maps[0].map = &obj->maps.rodata;

	/* programs */
	s->prog_cnt = 4;
	s->prog_skel_sz = sizeof(*s->progs);
	s->progs = (struct bpf_prog_skeleton *)calloc(s->prog_cnt, s->prog_skel_sz);
	if (!s->progs) {
		err = -ENOMEM;
		goto err;
	}

	s->progs[0].name = "uprobe_add";
	s->progs[0].prog = &obj->progs.uprobe_add;
	s->progs[0].link = &obj->links.uprobe_add;

	s->progs[1].name = "uretprobe_add";
	s->progs[1].prog = &obj->progs.uretprobe_add;
	s->progs[1].link = &obj->links.uretprobe_add;

	s->progs[2].name = "uprobe_sub";
	s->progs[2].prog = &obj->progs.uprobe_sub;
	s->progs[2].link = &obj->links.uprobe_sub;

	s->progs[3].name = "uretprobe_sub";
	s->progs[3].prog = &obj->progs.uretprobe_sub;
	s->progs[3].link = &obj->links.uretprobe_sub;

	s->data = uprobe_bpf__elf_bytes(&s->data_sz);

	obj->skeleton = s;
	return 0;
err:
	bpf_object__destroy_skeleton(s);
	return err;
}

static inline const void *uprobe_bpf__elf_bytes(size_t *sz)
{
	static const char data[] __attribute__((__aligned__(8))) = "\
\x7f\x45\x4c\x46\x02\x01\x01\0\0\0\0\0\0\0\0\0\x01\0\xf7\0\x01\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\xe0\x0c\0\0\0\0\0\0\0\0\0\0\x40\0\0\0\0\0\x40\0\x0f\0\
\x01\0\0\x2e\x73\x74\x72\x74\x61\x62\0\x2e\x73\x79\x6d\x74\x61\x62\0\x75\x70\
\x72\x6f\x62\x65\0\x75\x72\x65\x74\x70\x72\x6f\x62\x65\0\x75\x70\x72\x6f\x62\
\x65\x2f\x2f\x70\x72\x6f\x63\x2f\x73\x65\x6c\x66\x2f\x65\x78\x65\x3a\x75\x70\
\x72\x6f\x62\x65\x64\x5f\x73\x75\x62\0\x75\x72\x65\x74\x70\x72\x6f\x62\x65\x2f\
\x2f\x70\x72\x6f\x63\x2f\x73\x65\x6c\x66\x2f\x65\x78\x65\x3a\x75\x70\x72\x6f\
\x62\x65\x64\x5f\x73\x75\x62\0\x6c\x69\x63\x65\x6e\x73\x65\0\x2e\x72\x6f\x64\
\x61\x74\x61\0\x75\x70\x72\x6f\x62\x65\x2e\x62\x70\x66\x2e\x63\0\x5f\x5f\x5f\
\x5f\x75\x70\x72\x6f\x62\x65\x5f\x61\x64\x64\x2e\x5f\x5f\x5f\x5f\x66\x6d\x74\0\
\x5f\x5f\x5f\x5f\x75\x72\x65\x74\x70\x72\x6f\x62\x65\x5f\x61\x64\x64\x2e\x5f\
\x5f\x5f\x5f\x66\x6d\x74\0\x5f\x5f\x5f\x5f\x75\x70\x72\x6f\x62\x65\x5f\x73\x75\
\x62\x2e\x5f\x5f\x5f\x5f\x66\x6d\x74\0\x5f\x5f\x5f\x5f\x75\x72\x65\x74\x70\x72\
\x6f\x62\x65\x5f\x73\x75\x62\x2e\x5f\x5f\x5f\x5f\x66\x6d\x74\0\x75\x70\x72\x6f\
\x62\x65\x5f\x61\x64\x64\0\x75\x72\x65\x74\x70\x72\x6f\x62\x65\x5f\x61\x64\x64\
\0\x75\x70\x72\x6f\x62\x65\x5f\x73\x75\x62\0\x75\x72\x65\x74\x70\x72\x6f\x62\
\x65\x5f\x73\x75\x62\0\x4c\x49\x43\x45\x4e\x53\x45\0\x2e\x72\x65\x6c\x75\x70\
\x72\x6f\x62\x65\0\x2e\x72\x65\x6c\x75\x72\x65\x74\x70\x72\x6f\x62\x65\0\x2e\
\x72\x65\x6c\x75\x70\x72\x6f\x62\x65\x2f\x2f\x70\x72\x6f\x63\x2f\x73\x65\x6c\
\x66\x2f\x65\x78\x65\x3a\x75\x70\x72\x6f\x62\x65\x64\x5f\x73\x75\x62\0\x2e\x72\
\x65\x6c\x75\x72\x65\x74\x70\x72\x6f\x62\x65\x2f\x2f\x70\x72\x6f\x63\x2f\x73\
\x65\x6c\x66\x2f\x65\x78\x65\x3a\x75\x70\x72\x6f\x62\x65\x64\x5f\x73\x75\x62\0\
\x2e\x42\x54\x46\0\x2e\x42\x54\x46\x2e\x65\x78\x74\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\x79\0\0\0\x04\0\xf1\xff\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\x03\0\x03\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x86\0\0\0\x01\0\x08\0\0\0\
\0\0\0\0\0\0\x22\0\0\0\0\0\0\0\0\0\0\0\x03\0\x04\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\x9d\0\0\0\x01\0\x08\0\x22\0\0\0\0\0\0\0\x1e\0\0\0\0\0\0\0\0\0\0\0\x03\0\
\x05\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xb7\0\0\0\x01\0\x08\0\x40\0\0\0\0\0\0\0\
\x22\0\0\0\0\0\0\0\0\0\0\0\x03\0\x06\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xce\0\0\
\0\x01\0\x08\0\x62\0\0\0\0\0\0\0\x1e\0\0\0\0\0\0\0\0\0\0\0\x03\0\x08\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\xe8\0\0\0\x12\0\x03\0\0\0\0\0\0\0\0\0\x40\0\0\0\0\0\0\
\0\xf3\0\0\0\x12\0\x04\0\0\0\0\0\0\0\0\0\x38\0\0\0\0\0\0\0\x01\x01\0\0\x12\0\
\x05\0\0\0\0\0\0\0\0\0\x40\0\0\0\0\0\0\0\x0c\x01\0\0\x12\0\x06\0\0\0\0\0\0\0\0\
\0\x38\0\0\0\0\0\0\0\x1a\x01\0\0\x11\0\x07\0\0\0\0\0\0\0\0\0\x0d\0\0\0\0\0\0\0\
\x79\x14\x68\0\0\0\0\0\x79\x13\x70\0\0\0\0\0\x18\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\xb7\x02\0\0\x22\0\0\0\x85\0\0\0\x06\0\0\0\xb7\0\0\0\0\0\0\0\x95\0\0\0\0\0\0\
\0\x79\x13\x50\0\0\0\0\0\x18\x01\0\0\x22\0\0\0\0\0\0\0\0\0\0\0\xb7\x02\0\0\x1e\
\0\0\0\x85\0\0\0\x06\0\0\0\xb7\0\0\0\0\0\0\0\x95\0\0\0\0\0\0\0\x79\x14\x68\0\0\
\0\0\0\x79\x13\x70\0\0\0\0\0\x18\x01\0\0\x40\0\0\0\0\0\0\0\0\0\0\0\xb7\x02\0\0\
\x22\0\0\0\x85\0\0\0\x06\0\0\0\xb7\0\0\0\0\0\0\0\x95\0\0\0\0\0\0\0\x79\x13\x50\
\0\0\0\0\0\x18\x01\0\0\x62\0\0\0\0\0\0\0\0\0\0\0\xb7\x02\0\0\x1e\0\0\0\x85\0\0\
\0\x06\0\0\0\xb7\0\0\0\0\0\0\0\x95\0\0\0\0\0\0\0\x44\x75\x61\x6c\x20\x42\x53\
\x44\x2f\x47\x50\x4c\0\x75\x70\x72\x6f\x62\x65\x64\x5f\x61\x64\x64\x20\x45\x4e\
\x54\x52\x59\x3a\x20\x61\x20\x3d\x20\x25\x64\x2c\x20\x62\x20\x3d\x20\x25\x64\0\
\x75\x70\x72\x6f\x62\x65\x64\x5f\x61\x64\x64\x20\x45\x58\x49\x54\x3a\x20\x72\
\x65\x74\x75\x72\x6e\x20\x3d\x20\x25\x64\0\x75\x70\x72\x6f\x62\x65\x64\x5f\x73\
\x75\x62\x20\x45\x4e\x54\x52\x59\x3a\x20\x61\x20\x3d\x20\x25\x64\x2c\x20\x62\
\x20\x3d\x20\x25\x64\0\x75\x70\x72\x6f\x62\x65\x64\x5f\x73\x75\x62\x20\x45\x58\
\x49\x54\x3a\x20\x72\x65\x74\x75\x72\x6e\x20\x3d\x20\x25\x64\0\0\0\0\x10\0\0\0\
\0\0\0\0\x01\0\0\0\x0a\0\0\0\x08\0\0\0\0\0\0\0\x01\0\0\0\x0a\0\0\0\x10\0\0\0\0\
\0\0\0\x01\0\0\0\x0a\0\0\0\x08\0\0\0\0\0\0\0\x01\0\0\0\x0a\0\0\0\x9f\xeb\x01\0\
\x18\0\0\0\0\0\0\0\x90\x02\0\0\x90\x02\0\0\x49\x03\0\0\0\0\0\0\0\0\0\x02\x02\0\
\0\0\x01\0\0\0\x15\0\0\x04\xa8\0\0\0\x09\0\0\0\x03\0\0\0\0\0\0\0\x0d\0\0\0\x03\
\0\0\0\x40\0\0\0\x11\0\0\0\x03\0\0\0\x80\0\0\0\x15\0\0\0\x03\0\0\0\xc0\0\0\0\
\x19\0\0\0\x03\0\0\0\0\x01\0\0\x1c\0\0\0\x03\0\0\0\x40\x01\0\0\x1f\0\0\0\x03\0\
\0\0\x80\x01\0\0\x23\0\0\0\x03\0\0\0\xc0\x01\0\0\x27\0\0\0\x03\0\0\0\0\x02\0\0\
\x2a\0\0\0\x03\0\0\0\x40\x02\0\0\x2d\0\0\0\x03\0\0\0\x80\x02\0\0\x30\0\0\0\x03\
\0\0\0\xc0\x02\0\0\x33\0\0\0\x03\0\0\0\0\x03\0\0\x36\0\0\0\x03\0\0\0\x40\x03\0\
\0\x39\0\0\0\x03\0\0\0\x80\x03\0\0\x3c\0\0\0\x03\0\0\0\xc0\x03\0\0\x44\0\0\0\
\x03\0\0\0\0\x04\0\0\x47\0\0\0\x03\0\0\0\x40\x04\0\0\x4a\0\0\0\x03\0\0\0\x80\
\x04\0\0\x50\0\0\0\x03\0\0\0\xc0\x04\0\0\x53\0\0\0\x03\0\0\0\0\x05\0\0\x56\0\0\
\0\0\0\0\x01\x08\0\0\0\x40\0\0\0\0\0\0\0\x01\0\0\x0d\x05\0\0\0\x64\0\0\0\x01\0\
\0\0\x68\0\0\0\0\0\0\x01\x04\0\0\0\x20\0\0\x01\x6c\0\0\0\x01\0\0\x0c\x04\0\0\0\
\x77\0\0\0\x01\0\0\x0c\x04\0\0\0\x85\0\0\0\x01\0\0\x0c\x04\0\0\0\x90\0\0\0\x01\
\0\0\x0c\x04\0\0\0\x9e\0\0\0\0\0\0\x01\x01\0\0\0\x08\0\0\x01\0\0\0\0\0\0\0\x03\
\0\0\0\0\x0a\0\0\0\x0c\0\0\0\x0d\0\0\0\xa3\0\0\0\0\0\0\x01\x04\0\0\0\x20\0\0\0\
\xb7\0\0\0\0\0\0\x0e\x0b\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\x0a\x0a\0\0\0\0\0\0\0\0\
\0\0\x03\0\0\0\0\x0e\0\0\0\x0c\0\0\0\x22\0\0\0\xbf\0\0\0\0\0\0\x0e\x0f\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\x03\0\0\0\0\x0e\0\0\0\x0c\0\0\0\x1e\0\0\0\xd6\0\0\0\0\0\0\
\x0e\x11\0\0\0\0\0\0\0\xf0\0\0\0\0\0\0\x0e\x0f\0\0\0\0\0\0\0\x07\x01\0\0\0\0\0\
\x0e\x11\0\0\0\0\0\0\0\xe1\x02\0\0\x01\0\0\x0f\x0d\0\0\0\x0d\0\0\0\0\0\0\0\x0d\
\0\0\0\xe9\x02\0\0\x04\0\0\x0f\x80\0\0\0\x10\0\0\0\0\0\0\0\x22\0\0\0\x12\0\0\0\
\x22\0\0\0\x1e\0\0\0\x13\0\0\0\x40\0\0\0\x22\0\0\0\x14\0\0\0\x62\0\0\0\x1e\0\0\
\0\0\x70\x74\x5f\x72\x65\x67\x73\0\x72\x31\x35\0\x72\x31\x34\0\x72\x31\x33\0\
\x72\x31\x32\0\x62\x70\0\x62\x78\0\x72\x31\x31\0\x72\x31\x30\0\x72\x39\0\x72\
\x38\0\x61\x78\0\x63\x78\0\x64\x78\0\x73\x69\0\x64\x69\0\x6f\x72\x69\x67\x5f\
\x61\x78\0\x69\x70\0\x63\x73\0\x66\x6c\x61\x67\x73\0\x73\x70\0\x73\x73\0\x75\
\x6e\x73\x69\x67\x6e\x65\x64\x20\x6c\x6f\x6e\x67\0\x63\x74\x78\0\x69\x6e\x74\0\
\x75\x70\x72\x6f\x62\x65\x5f\x61\x64\x64\0\x75\x72\x65\x74\x70\x72\x6f\x62\x65\
\x5f\x61\x64\x64\0\x75\x70\x72\x6f\x62\x65\x5f\x73\x75\x62\0\x75\x72\x65\x74\
\x70\x72\x6f\x62\x65\x5f\x73\x75\x62\0\x63\x68\x61\x72\0\x5f\x5f\x41\x52\x52\
\x41\x59\x5f\x53\x49\x5a\x45\x5f\x54\x59\x50\x45\x5f\x5f\0\x4c\x49\x43\x45\x4e\
\x53\x45\0\x5f\x5f\x5f\x5f\x75\x70\x72\x6f\x62\x65\x5f\x61\x64\x64\x2e\x5f\x5f\
\x5f\x5f\x66\x6d\x74\0\x5f\x5f\x5f\x5f\x75\x72\x65\x74\x70\x72\x6f\x62\x65\x5f\
\x61\x64\x64\x2e\x5f\x5f\x5f\x5f\x66\x6d\x74\0\x5f\x5f\x5f\x5f\x75\x70\x72\x6f\
\x62\x65\x5f\x73\x75\x62\x2e\x5f\x5f\x5f\x5f\x66\x6d\x74\0\x5f\x5f\x5f\x5f\x75\
\x72\x65\x74\x70\x72\x6f\x62\x65\x5f\x73\x75\x62\x2e\x5f\x5f\x5f\x5f\x66\x6d\
\x74\0\x2f\x68\x6f\x6d\x65\x2f\x70\x72\x69\x79\x61\x2f\x6c\x69\x62\x62\x70\x66\
\x2d\x62\x6f\x6f\x74\x73\x74\x72\x61\x70\x2f\x65\x78\x61\x6d\x70\x6c\x65\x73\
\x2f\x63\x2f\x75\x70\x72\x6f\x62\x65\x2e\x62\x70\x66\x2e\x63\0\x69\x6e\x74\x20\
\x42\x50\x46\x5f\x4b\x50\x52\x4f\x42\x45\x28\x75\x70\x72\x6f\x62\x65\x5f\x61\
\x64\x64\x2c\x20\x69\x6e\x74\x20\x61\x2c\x20\x69\x6e\x74\x20\x62\x29\0\x09\x62\
\x70\x66\x5f\x70\x72\x69\x6e\x74\x6b\x28\x22\x75\x70\x72\x6f\x62\x65\x64\x5f\
\x61\x64\x64\x20\x45\x4e\x54\x52\x59\x3a\x20\x61\x20\x3d\x20\x25\x64\x2c\x20\
\x62\x20\x3d\x20\x25\x64\x22\x2c\x20\x61\x2c\x20\x62\x29\x3b\0\x69\x6e\x74\x20\
\x42\x50\x46\x5f\x4b\x52\x45\x54\x50\x52\x4f\x42\x45\x28\x75\x72\x65\x74\x70\
\x72\x6f\x62\x65\x5f\x61\x64\x64\x2c\x20\x69\x6e\x74\x20\x72\x65\x74\x29\0\x09\
\x62\x70\x66\x5f\x70\x72\x69\x6e\x74\x6b\x28\x22\x75\x70\x72\x6f\x62\x65\x64\
\x5f\x61\x64\x64\x20\x45\x58\x49\x54\x3a\x20\x72\x65\x74\x75\x72\x6e\x20\x3d\
\x20\x25\x64\x22\x2c\x20\x72\x65\x74\x29\x3b\0\x69\x6e\x74\x20\x42\x50\x46\x5f\
\x4b\x50\x52\x4f\x42\x45\x28\x75\x70\x72\x6f\x62\x65\x5f\x73\x75\x62\x2c\x20\
\x69\x6e\x74\x20\x61\x2c\x20\x69\x6e\x74\x20\x62\x29\0\x09\x62\x70\x66\x5f\x70\
\x72\x69\x6e\x74\x6b\x28\x22\x75\x70\x72\x6f\x62\x65\x64\x5f\x73\x75\x62\x20\
\x45\x4e\x54\x52\x59\x3a\x20\x61\x20\x3d\x20\x25\x64\x2c\x20\x62\x20\x3d\x20\
\x25\x64\x22\x2c\x20\x61\x2c\x20\x62\x29\x3b\0\x69\x6e\x74\x20\x42\x50\x46\x5f\
\x4b\x52\x45\x54\x50\x52\x4f\x42\x45\x28\x75\x72\x65\x74\x70\x72\x6f\x62\x65\
\x5f\x73\x75\x62\x2c\x20\x69\x6e\x74\x20\x72\x65\x74\x29\0\x09\x62\x70\x66\x5f\
\x70\x72\x69\x6e\x74\x6b\x28\x22\x75\x70\x72\x6f\x62\x65\x64\x5f\x73\x75\x62\
\x20\x45\x58\x49\x54\x3a\x20\x72\x65\x74\x75\x72\x6e\x20\x3d\x20\x25\x64\x22\
\x2c\x20\x72\x65\x74\x29\x3b\0\x30\x3a\x31\x33\0\x30\x3a\x31\x34\0\x30\x3a\x31\
\x30\0\x6c\x69\x63\x65\x6e\x73\x65\0\x2e\x72\x6f\x64\x61\x74\x61\0\x75\x70\x72\
\x6f\x62\x65\0\x75\x72\x65\x74\x70\x72\x6f\x62\x65\0\x75\x70\x72\x6f\x62\x65\
\x2f\x2f\x70\x72\x6f\x63\x2f\x73\x65\x6c\x66\x2f\x65\x78\x65\x3a\x75\x70\x72\
\x6f\x62\x65\x64\x5f\x73\x75\x62\0\x75\x72\x65\x74\x70\x72\x6f\x62\x65\x2f\x2f\
\x70\x72\x6f\x63\x2f\x73\x65\x6c\x66\x2f\x65\x78\x65\x3a\x75\x70\x72\x6f\x62\
\x65\x64\x5f\x73\x75\x62\0\0\0\0\0\0\0\0\x9f\xeb\x01\0\x20\0\0\0\0\0\0\0\x44\0\
\0\0\x44\0\0\0\xe4\0\0\0\x28\x01\0\0\x84\0\0\0\x08\0\0\0\xf1\x02\0\0\x01\0\0\0\
\0\0\0\0\x06\0\0\0\xf8\x02\0\0\x01\0\0\0\0\0\0\0\x07\0\0\0\x02\x03\0\0\x01\0\0\
\0\0\0\0\0\x08\0\0\0\x24\x03\0\0\x01\0\0\0\0\0\0\0\x09\0\0\0\x10\0\0\0\xf1\x02\
\0\0\x03\0\0\0\0\0\0\0\x21\x01\0\0\x56\x01\0\0\x05\x28\0\0\x10\0\0\0\x21\x01\0\
\0\x7f\x01\0\0\x02\x30\0\0\x30\0\0\0\x21\x01\0\0\x56\x01\0\0\x05\x28\0\0\xf8\
\x02\0\0\x03\0\0\0\0\0\0\0\x21\x01\0\0\xb7\x01\0\0\x05\x44\0\0\x08\0\0\0\x21\
\x01\0\0\xe1\x01\0\0\x02\x4c\0\0\x28\0\0\0\x21\x01\0\0\xb7\x01\0\0\x05\x44\0\0\
\x02\x03\0\0\x03\0\0\0\0\0\0\0\x21\x01\0\0\x14\x02\0\0\x05\x60\0\0\x10\0\0\0\
\x21\x01\0\0\x3d\x02\0\0\x02\x68\0\0\x30\0\0\0\x21\x01\0\0\x14\x02\0\0\x05\x60\
\0\0\x24\x03\0\0\x03\0\0\0\0\0\0\0\x21\x01\0\0\x75\x02\0\0\x05\x7c\0\0\x08\0\0\
\0\x21\x01\0\0\x9f\x02\0\0\x02\x84\0\0\x28\0\0\0\x21\x01\0\0\x75\x02\0\0\x05\
\x7c\0\0\x10\0\0\0\xf1\x02\0\0\x02\0\0\0\0\0\0\0\x02\0\0\0\xd2\x02\0\0\0\0\0\0\
\x08\0\0\0\x02\0\0\0\xd7\x02\0\0\0\0\0\0\xf8\x02\0\0\x01\0\0\0\0\0\0\0\x02\0\0\
\0\xdc\x02\0\0\0\0\0\0\x02\x03\0\0\x02\0\0\0\0\0\0\0\x02\0\0\0\xd2\x02\0\0\0\0\
\0\0\x08\0\0\0\x02\0\0\0\xd7\x02\0\0\0\0\0\0\x24\x03\0\0\x01\0\0\0\0\0\0\0\x02\
\0\0\0\xdc\x02\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\x01\0\0\0\x03\0\0\0\x20\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x40\0\0\0\0\0\0\0\
\x98\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x09\0\0\
\0\x02\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xd8\x01\0\0\0\0\0\0\x80\x01\0\0\0\
\0\0\0\x01\0\0\0\0\0\0\0\x08\0\0\0\0\0\0\0\x18\0\0\0\0\0\0\0\x11\0\0\0\x01\0\0\
\0\x06\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x58\x03\0\0\0\0\0\0\x40\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\x08\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x18\0\0\0\x01\0\0\0\x06\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\x98\x03\0\0\0\0\0\0\x38\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\x08\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x22\0\0\0\x01\0\0\0\x06\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\xd0\x03\0\0\0\0\0\0\x40\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x08\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\x44\0\0\0\x01\0\0\0\x06\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x10\
\x04\0\0\0\0\0\0\x38\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x08\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\x69\0\0\0\x01\0\0\0\x03\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x48\x04\0\0\0\0\0\
\0\x0d\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x71\0\0\
\0\x01\0\0\0\x02\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x55\x04\0\0\0\0\0\0\x80\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x22\x01\0\0\x09\0\0\0\
\x40\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xd8\x04\0\0\0\0\0\0\x10\0\0\0\0\0\0\0\x02\0\
\0\0\x03\0\0\0\x08\0\0\0\0\0\0\0\x10\0\0\0\0\0\0\0\x2d\x01\0\0\x09\0\0\0\x40\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xe8\x04\0\0\0\0\0\0\x10\0\0\0\0\0\0\0\x02\0\0\0\
\x04\0\0\0\x08\0\0\0\0\0\0\0\x10\0\0\0\0\0\0\0\x3b\x01\0\0\x09\0\0\0\x40\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\xf8\x04\0\0\0\0\0\0\x10\0\0\0\0\0\0\0\x02\0\0\0\x05\0\
\0\0\x08\0\0\0\0\0\0\0\x10\0\0\0\0\0\0\0\x61\x01\0\0\x09\0\0\0\x40\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\x08\x05\0\0\0\0\0\0\x10\0\0\0\0\0\0\0\x02\0\0\0\x06\0\0\0\
\x08\0\0\0\0\0\0\0\x10\0\0\0\0\0\0\0\x8a\x01\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\x18\x05\0\0\0\0\0\0\xf1\x05\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x08\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\x8f\x01\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\x10\x0b\0\0\0\0\0\0\xcc\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x08\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0";

	*sz = sizeof(data) - 1;
	return (const void *)data;
}

#ifdef __cplusplus
struct uprobe_bpf *uprobe_bpf::open(const struct bpf_object_open_opts *opts) { return uprobe_bpf__open_opts(opts); }
struct uprobe_bpf *uprobe_bpf::open_and_load() { return uprobe_bpf__open_and_load(); }
int uprobe_bpf::load(struct uprobe_bpf *skel) { return uprobe_bpf__load(skel); }
int uprobe_bpf::attach(struct uprobe_bpf *skel) { return uprobe_bpf__attach(skel); }
void uprobe_bpf::detach(struct uprobe_bpf *skel) { uprobe_bpf__detach(skel); }
void uprobe_bpf::destroy(struct uprobe_bpf *skel) { uprobe_bpf__destroy(skel); }
const void *uprobe_bpf::elf_bytes(size_t *sz) { return uprobe_bpf__elf_bytes(sz); }
#endif /* __cplusplus */

__attribute__((unused)) static void
uprobe_bpf__assert(struct uprobe_bpf *s __attribute__((unused)))
{
#ifdef __cplusplus
#define _Static_assert static_assert
#endif
#ifdef __cplusplus
#undef _Static_assert
#endif
}

#endif /* __UPROBE_BPF_SKEL_H__ */
